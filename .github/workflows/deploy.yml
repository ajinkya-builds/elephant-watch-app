# Deploy to GitHub Pages workflow
# Last updated: 2024-03-19
name: Deploy to GitHub Pages

# Workflow to build and deploy the application to GitHub Pages
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --verbose

      - name: Debug Environment
        id: debug
        run: |
          echo "Node version:"
          node --version
          echo "NPM version:"
          npm --version
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Package.json contents:"
          cat package.json

      - name: Build
        working-directory: ./frontend
        env:
          VITE_BASE_PATH: "/elephant-watch-app/"
        run: |
          npm install --verbose
          npm run build --verbose

      - name: Prepare Deployment
        run: |
          echo "Preparing deployment..."
          # Create a temporary directory for deployment
          mkdir -p deploy
          # Copy only the frontend/dist contents to the deployment directory
          cp -r frontend/dist/* deploy/
          # Copy .nojekyll file
          cp .nojekyll deploy/
          # List contents to verify
          echo "Deployment directory contents:"
          ls -la deploy/

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: frontend/dist
          branch: gh-pages
          clean: true
          clean-exclude: |
            .git
            .github
            .gitignore
            README.md
            CNAME
          commit-message: "Deploy to GitHub Pages"

      - name: Verify Deployment
        id: verify
        continue-on-error: true
        run: |
          echo "Waiting for deployment to complete..."
          sleep 120  # Wait for 2 minutes
          echo "Checking deployment status..."
          echo "Attempting to access: https://ajinkyapatil.github.io/elephant-watch-app/"
          curl -v https://ajinkyapatil.github.io/elephant-watch-app/ > response.txt 2>&1
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://ajinkyapatil.github.io/elephant-watch-app/)
          echo "Response status code: $STATUS"
          echo "Full response:"
          cat response.txt
          if [ "$STATUS" != "200" ]; then
            echo "::warning::Deployment verification failed. Status code: $STATUS"
            echo "::warning::The site might still be deploying. Please check https://ajinkyapatil.github.io/elephant-watch-app/ in a few minutes."
          else
            echo "Deployment verified successfully"
          fi 
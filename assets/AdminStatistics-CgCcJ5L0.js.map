{"version":3,"file":"AdminStatistics-CgCcJ5L0.js","sources":["../../src/lib/adminStatisticsService.ts","../../src/components/ui/skeleton.tsx","../../src/pages/AdminStatistics.tsx"],"sourcesContent":["import { supabase } from './supabase';\n\nexport interface UserStats {\n  total_users: number;\n  active_users: number;\n  daily_active_users: number;\n  total_admins: number;\n  new_users_24h: number;\n  new_users_7d: number;\n  new_users_30d: number;\n  user_growth_rate: number;\n}\n\nexport interface ActivityStats {\n  total_records: number;\n  records_24h: number;\n  records_7d: number;\n  records_30d: number;\n  avg_records_per_user: number;\n  most_common_activity: string;\n  activity_distribution: Record<string, number>;\n}\n\nexport interface SystemHealth {\n  errors_24h: number;\n  errors_7d: number;\n  failed_logins_24h: number;\n  failed_logins_7d: number;\n  system_uptime: number;\n  avg_response_time: number;\n}\n\nexport interface UserActivityTimeline {\n  hour: number;\n  activity_count: number;\n  unique_users: number;\n}\n\nexport interface RecordCreationTimeline {\n  day: string;\n  record_count: number;\n  unique_users: number;\n}\n\nexport interface ResourceUtilization {\n  hour: number;\n  request_count: number;\n  avg_response_time: number;\n  error_count: number;\n}\n\nexport interface RecentActivity {\n  event_type: string;\n  user: string;\n  event_time: string;\n  details: string;\n}\n\nexport interface AdminStatisticsData {\n  userStats: UserStats;\n  activityStats: ActivityStats;\n  systemHealth: SystemHealth;\n  userActivityTimeline: UserActivityTimeline[];\n  recordCreationTimeline: RecordCreationTimeline[];\n  resourceUtilization: ResourceUtilization[];\n  recentActivity: RecentActivity[];\n}\n\nconst defaultUserStats: UserStats = {\n  total_users: 0,\n  active_users: 0,\n  daily_active_users: 0,\n  total_admins: 0,\n  new_users_24h: 0,\n  new_users_7d: 0,\n  new_users_30d: 0,\n  user_growth_rate: 0\n};\n\nconst defaultActivityStats: ActivityStats = {\n  total_records: 0,\n  records_24h: 0,\n  records_7d: 0,\n  records_30d: 0,\n  avg_records_per_user: 0,\n  most_common_activity: '',\n  activity_distribution: {}\n};\n\nconst defaultSystemHealth: SystemHealth = {\n  errors_24h: 0,\n  errors_7d: 0,\n  failed_logins_24h: 0,\n  failed_logins_7d: 0,\n  system_uptime: 100,\n  avg_response_time: 0\n};\n\nexport async function getAdminStatistics(): Promise<AdminStatisticsData> {\n  try {\n    const [\n      { data: userStats },\n      { data: activityStats },\n      { data: systemHealth },\n      { data: userActivityTimeline },\n      { data: recordCreationTimeline },\n      { data: resourceUtilization },\n      { data: recentActivity }\n    ] = await Promise.all([\n      supabase.from('user_statistics').select('*').single(),\n      supabase.from('activity_statistics').select('*').single(),\n      supabase.from('system_health').select('*').single(),\n      supabase.from('user_activity_timeline').select('*'),\n      supabase.from('record_creation_timeline').select('*'),\n      supabase.from('resource_utilization').select('*'),\n      supabase.from('recent_activity').select('*')\n    ]);\n\n    return {\n      userStats: (userStats || defaultUserStats) as UserStats,\n      activityStats: (activityStats || defaultActivityStats) as ActivityStats,\n      systemHealth: (systemHealth || defaultSystemHealth) as SystemHealth,\n      userActivityTimeline: (userActivityTimeline || []) as unknown as UserActivityTimeline[],\n      recordCreationTimeline: (recordCreationTimeline || []) as unknown as RecordCreationTimeline[],\n      resourceUtilization: (resourceUtilization || []) as unknown as ResourceUtilization[],\n      recentActivity: (recentActivity || []) as unknown as RecentActivity[]\n    };\n  } catch (error) {\n    console.error('Error fetching admin statistics:', error);\n    return {\n      userStats: defaultUserStats,\n      activityStats: defaultActivityStats,\n      systemHealth: defaultSystemHealth,\n      userActivityTimeline: [],\n      recordCreationTimeline: [],\n      resourceUtilization: [],\n      recentActivity: []\n    };\n  }\n} ","import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { getAdminStatistics, AdminStatisticsData } from \"@/lib/adminStatisticsService\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, BarChart, Bar } from \"recharts\";\nimport { Loader2, RefreshCw } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\nexport default function AdminStatistics() {\n  const navigate = useNavigate();\n  const [dateRange, setDateRange] = useState(\"7d\");\n  const [autoRefresh, setAutoRefresh] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [statistics, setStatistics] = useState<AdminStatisticsData | null>(null);\n  const [refreshing, setRefreshing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchStats = async () => {\n    try {\n      setRefreshing(true);\n      const data = await getAdminStatistics();\n      setStatistics(data);\n    } catch (error) {\n      console.error('Error fetching statistics:', error);\n      toast.error('Failed to fetch statistics');\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchStats();\n  }, []);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (autoRefresh) {\n      interval = setInterval(fetchStats, 60000); // Refresh every minute\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [autoRefresh]);\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto p-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Admin Statistics</h1>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"p-4\">\n              <Skeleton className=\"h-4 w-3/4 mb-2\" />\n              <Skeleton className=\"h-8 w-1/2\" />\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !statistics) {\n    return (\n      <div className=\"container mx-auto p-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Admin Statistics</h1>\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n          {error || 'Failed to load statistics'}\n        </div>\n      </div>\n    );\n  }\n\n  const userActivityData = statistics.userActivityTimeline.map(item => ({\n    hour: item.hour,\n    activity: item.activity_count,\n    users: item.unique_users\n  }));\n\n  const recordCreationData = statistics.recordCreationTimeline.map(item => ({\n    day: item.day,\n    records: item.record_count,\n    users: item.unique_users\n  }));\n\n  const resourceUtilizationData = statistics.resourceUtilization.map(item => ({\n    hour: item.hour,\n    requests: item.request_count,\n    responseTime: item.avg_response_time,\n    errors: item.error_count\n  }));\n\n  const userDistributionData = [\n    { name: 'Admins', value: statistics.userStats.total_admins },\n    { name: 'Regular Users', value: statistics.userStats.total_users - statistics.userStats.total_admins }\n  ];\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Admin Statistics</h1>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n        <Card className=\"p-4\">\n          <h2 className=\"text-lg font-semibold mb-2\">User Activity</h2>\n          <div className=\"h-[200px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={userActivityData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"hour\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"activity\" stroke=\"#8884d8\" />\n                <Line type=\"monotone\" dataKey=\"users\" stroke=\"#82ca9d\" />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h2 className=\"text-lg font-semibold mb-2\">Record Creation</h2>\n          <div className=\"h-[200px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={recordCreationData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"day\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"records\" fill=\"#8884d8\" />\n                <Bar dataKey=\"users\" fill=\"#82ca9d\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h2 className=\"text-lg font-semibold mb-2\">Resource Utilization</h2>\n          <div className=\"h-[200px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={resourceUtilizationData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"hour\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"requests\" fill=\"#8884d8\" />\n                <Bar dataKey=\"errors\" fill=\"#ff8042\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h2 className=\"text-lg font-semibold mb-2\">User Distribution</h2>\n          <div className=\"h-[200px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={userDistributionData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                >\n                  {userDistributionData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"p-4\">\n          <h2 className=\"text-lg font-semibold mb-4\">User Statistics</h2>\n          <div className=\"space-y-2\">\n            <p>Total Users: {statistics.userStats.total_users}</p>\n            <p>Active Users: {statistics.userStats.active_users}</p>\n            <p>Daily Active Users: {statistics.userStats.daily_active_users}</p>\n            <p>Total Admins: {statistics.userStats.total_admins}</p>\n            <p>New Users (24h): {statistics.userStats.new_users_24h}</p>\n            <p>New Users (7d): {statistics.userStats.new_users_7d}</p>\n            <p>New Users (30d): {statistics.userStats.new_users_30d}</p>\n            <p>Growth Rate: {statistics.userStats.user_growth_rate}%</p>\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h2 className=\"text-lg font-semibold mb-4\">Activity Statistics</h2>\n          <div className=\"space-y-2\">\n            <p>Total Records: {statistics.activityStats.total_records}</p>\n            <p>Records (24h): {statistics.activityStats.records_24h}</p>\n            <p>Records (7d): {statistics.activityStats.records_7d}</p>\n            <p>Records (30d): {statistics.activityStats.records_30d}</p>\n            <p>Avg Records/User: {statistics.activityStats.avg_records_per_user}</p>\n            <p>Most Common Activity: {statistics.activityStats.most_common_activity}</p>\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h2 className=\"text-lg font-semibold mb-4\">System Health</h2>\n          <div className=\"space-y-2\">\n            <p>Errors (24h): {statistics.systemHealth.errors_24h}</p>\n            <p>Errors (7d): {statistics.systemHealth.errors_7d}</p>\n            <p>Failed Logins (24h): {statistics.systemHealth.failed_logins_24h}</p>\n            <p>Failed Logins (7d): {statistics.systemHealth.failed_logins_7d}</p>\n            <p>System Uptime: {statistics.systemHealth.system_uptime}%</p>\n            <p>Avg Response Time: {statistics.systemHealth.avg_response_time}ms</p>\n          </div>\n        </Card>\n      </div>\n\n      <Card className=\"mt-8 p-4\">\n        <h2 className=\"text-lg font-semibold mb-4\">Recent Activity</h2>\n        <div className=\"space-y-4\">\n          {statistics.recentActivity.map((activity, index) => (\n            <div key={index} className=\"flex items-start space-x-4\">\n              <div className=\"flex-1\">\n                <div className=\"font-medium\">{activity.event_type}</div>\n                <div className=\"text-sm text-gray-500\">{activity.details}</div>\n                <div className=\"text-xs text-gray-400\">\n                  {new Date(activity.event_time).toLocaleString()} by {activity.user}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n} "],"names":["defaultUserStats","defaultActivityStats","defaultSystemHealth","getAdminStatistics","userStats","activityStats","systemHealth","userActivityTimeline","recordCreationTimeline","resourceUtilization","recentActivity","supabase","error","Skeleton","className","props","jsx","cn","COLORS","AdminStatistics","useNavigate","dateRange","setDateRange","useState","autoRefresh","setAutoRefresh","loading","setLoading","statistics","setStatistics","refreshing","setRefreshing","setError","fetchStats","data","toast","useEffect","interval","jsxs","_","i","Card","userActivityData","item","recordCreationData","resourceUtilizationData","userDistributionData","ResponsiveContainer","LineChart","CartesianGrid","XAxis","YAxis","Tooltip","Line","BarChart","Bar","PieChart","Pie","name","percent","entry","index","Cell","activity"],"mappings":"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"}
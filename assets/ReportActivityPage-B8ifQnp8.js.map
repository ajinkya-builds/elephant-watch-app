{"version":3,"file":"ReportActivityPage-B8ifQnp8.js","sources":["../../src/components/ui/progress.tsx","../../src/contexts/ActivityFormContext.tsx","../../src/hooks/useGeolocation.ts","../../src/components/form-steps/DateTimeLocationStep.tsx","../../src/components/ui/radio-group.tsx","../../src/components/form-steps/ObservationTypeStep.tsx","../../src/utils/loggerService.ts","../../src/utils/compassService.ts","../../src/components/form-steps/CompassBearingStep.tsx","../../src/components/form-steps/PhotoStep.tsx","../../src/components/ActivityReportStepper.tsx","../../src/utils/networkUtils.ts","../../src/utils/userUtils.ts","../../src/utils/offlineStorage.ts","../../src/pages/ReportActivityPage.tsx"],"sourcesContent":["import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-gray-200 dark:bg-gray-800\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","import { createContext, useContext, useState, ReactNode } from 'react';\n\n\nexport type FormStep = 'dateTimeLocation' | 'observationType' | 'compassBearing' | 'photo';\n\ninterface ActivityFormData {\n  activity_date: string | Date | null;\n  activity_time: string | null;\n  observation_type: string | null;\n  latitude: number | null;\n  longitude: number | null;\n  total_elephants: number | null;\n  male_elephants: number | null;\n  female_elephants: number | null;\n  unknown_elephants: number | null;\n  calves: number | null;\n  indirect_sighting_type: string | null;\n  loss_type: string | null;\n  compass_bearing: number | null;\n  photo_url: string | null;\n}\n\ninterface ActivityFormContextType {\n  currentStep: FormStep;\n  formData: ActivityFormData;\n  goToNextStep: () => void;\n  goToPreviousStep: () => void;\n  updateFormData: (data: Partial<ActivityFormData>) => void;\n  isStepValid: (step: FormStep) => boolean;\n  isLastStep: () => boolean;\n  resetForm: () => void;\n  isPhotoUploading: boolean;\n  setIsPhotoUploading: (isUploading: boolean) => void;\n}\n\nconst initialFormData: ActivityFormData = {\n  activity_date: null,\n  activity_time: null,\n  observation_type: null,\n  latitude: null,\n  longitude: null,\n  total_elephants: null,\n  male_elephants: null,\n  female_elephants: null,\n  unknown_elephants: null,\n  calves: null,\n  indirect_sighting_type: null,\n  loss_type: null,\n  compass_bearing: null,\n  photo_url: null,\n};\n\nconst ActivityFormContext = createContext<ActivityFormContextType | undefined>(undefined);\n\nexport function ActivityFormProvider({ children }: { children: ReactNode }) {\n  const [currentStep, setCurrentStep] = useState<FormStep>('dateTimeLocation');\n  const [formData, setFormData] = useState<ActivityFormData>(initialFormData);\n  const [isPhotoUploading, setIsPhotoUploading] = useState(false);\n\n  const steps: FormStep[] = ['dateTimeLocation', 'observationType', 'compassBearing', 'photo'];\n\n  const goToNextStep = () => {\n    const currentIndex = steps.indexOf(currentStep);\n    if (currentIndex < steps.length - 1) {\n      setCurrentStep(steps[currentIndex + 1]);\n    }\n  };\n\n  const goToPreviousStep = () => {\n    const currentIndex = steps.indexOf(currentStep);\n    if (currentIndex > 0) {\n      setCurrentStep(steps[currentIndex - 1]);\n    }\n  };\n\n  const updateFormData = (data: Partial<ActivityFormData>) => {\n    setFormData(prev => ({ ...prev, ...data }));\n  };\n\n  const isStepValid = (step: FormStep): boolean => {\n    switch (step) {\n      case 'dateTimeLocation':\n        return !!formData.activity_date && !!formData.activity_time && \n               formData.latitude !== null && formData.longitude !== null;\n      case 'observationType':\n        return !!formData.observation_type;\n      case 'compassBearing':\n        return formData.compass_bearing !== null;\n      case 'photo':\n        return true; // Photo is optional\n      default:\n        return false;\n    }\n  };\n\n  const isLastStep = () => {\n    return currentStep === steps[steps.length - 1];\n  };\n\n  const resetForm = () => {\n    setFormData(initialFormData);\n    setCurrentStep('dateTimeLocation');\n    setIsPhotoUploading(false);\n  };\n\n  return (\n    <ActivityFormContext.Provider\n      value={{\n        currentStep,\n        formData,\n        goToNextStep,\n        goToPreviousStep,\n        updateFormData,\n        isStepValid,\n        isLastStep,\n        resetForm,\n        isPhotoUploading,\n        setIsPhotoUploading,\n      }}\n    >\n      {children}\n    </ActivityFormContext.Provider>\n  );\n}\n\nexport function useActivityForm() {\n  const context = useContext(ActivityFormContext);\n  if (context === undefined) {\n    throw new Error('useActivityForm must be used within an ActivityFormProvider');\n  }\n  return context;\n}","import { useState, useEffect } from 'react';\n\ninterface GeolocationState {\n  latitude: number | null;\n  longitude: number | null;\n  error: string | null;\n}\n\nexport const useGeolocation = () => {\n  const [state, setState] = useState<GeolocationState>({\n    latitude: null,\n    longitude: null,\n    error: null\n  });\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      setState(prev => ({\n        ...prev,\n        error: 'Geolocation is not supported by your browser'\n      }));\n      return;\n    }\n\n    const successHandler = (position: GeolocationPosition) => {\n      setState({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        error: null\n      });\n    };\n\n    const errorHandler = (error: GeolocationPositionError) => {\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }));\n    };\n\n    navigator.geolocation.getCurrentPosition(\n      successHandler,\n      errorHandler,\n      {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      }\n    );\n  }, []);\n\n  return state;\n}; ","import React from 'react';\nimport { useActivityForm } from '@/contexts/ActivityFormContext';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useGeolocation } from '@/hooks/useGeolocation';\nimport { Button } from '@/components/ui/button';\nimport { Clock, MapPin, RefreshCw } from 'lucide-react';\n\nexport function DateTimeLocationStep() {\n  const { formData, updateFormData } = useActivityForm();\n  const { latitude, longitude, error: geoError } = useGeolocation();\n\n\n\n  const handleFetchCurrentData = () => {\n    // Set current date and time\n    const now = new Date();\n    updateFormData({\n      activity_date: now.toISOString().split('T')[0],\n      activity_time: now.toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' })\n    });\n    \n    // Update location from geolocation hook\n    if (latitude && longitude) {\n      updateFormData({ latitude, longitude });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-end mb-2\">\n        <Button \n          type=\"button\" \n          variant=\"outline\" \n          size=\"sm\"\n          onClick={handleFetchCurrentData}\n          className=\"flex items-center gap-2 text-sm\"\n        >\n          <RefreshCw className=\"h-4 w-4\" />\n          Get Location, Date and Time\n        </Button>\n      </div>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center gap-2\">\n            <Label htmlFor=\"activity_date\">Date</Label>\n            <Clock className=\"h-4 w-4 text-gray-400\" />\n          </div>\n          <Input\n            id=\"activity_date\"\n            type=\"date\"\n            value={formData.activity_date instanceof Date \n              ? formData.activity_date.toISOString().split('T')[0]\n              : formData.activity_date || ''}\n            onChange={(e) => updateFormData({ activity_date: e.target.value })}\n            required\n          />\n        </div>\n\n        <div>\n          <div className=\"flex items-center gap-2\">\n            <Label htmlFor=\"activity_time\">Time</Label>\n            <Clock className=\"h-4 w-4 text-gray-400\" />\n          </div>\n          <Input\n            id=\"activity_time\"\n            type=\"time\"\n            value={formData.activity_time || ''}\n            onChange={(e) => updateFormData({ activity_time: e.target.value })}\n            required\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center gap-2\">\n            <Label>Location</Label>\n            <MapPin className=\"h-4 w-4 text-gray-400\" />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"latitude\" className=\"text-sm text-gray-500\">Latitude</Label>\n              <Input\n                id=\"latitude\"\n                type=\"number\"\n                step=\"any\"\n                value={formData.latitude || ''}\n                onChange={(e) => updateFormData({ latitude: parseFloat(e.target.value) })}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"longitude\" className=\"text-sm text-gray-500\">Longitude</Label>\n              <Input\n                id=\"longitude\"\n                type=\"number\"\n                step=\"any\"\n                value={formData.longitude || ''}\n                onChange={(e) => updateFormData({ longitude: parseFloat(e.target.value) })}\n                required\n              />\n            </div>\n          </div>\n          {geoError && (\n            <p className=\"text-sm text-red-500 mt-1\">\n              Error getting location: {geoError}\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n} ","import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","import React, { useCallback, useMemo } from 'react';\nimport { useActivityForm } from '@/contexts/ActivityFormContext';\n\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport debounce from 'lodash/debounce';\n\n\n\nimport { ObservationType, IndirectSightingType, LossType } from '@/types/activity-report';\n\nconst observationTypes: { value: ObservationType; label: string }[] = [\n  { value: 'direct', label: 'Direct Sighting' },\n  { value: 'indirect', label: 'Indirect Sighting' },\n  { value: 'loss', label: 'Loss Report' }\n];\n\nconst indirectSightingTypes: { value: IndirectSightingType; label: string }[] = [\n  { value: 'Pugmark', label: 'Pugmark' },\n  { value: 'Dung', label: 'Dung' },\n  { value: 'Broken Branches', label: 'Broken Branches' },\n  { value: 'Sound', label: 'Sound' },\n  { value: 'Eyewitness', label: 'Eyewitness' }\n];\n\nconst lossTypes: { value: LossType; label: string }[] = [\n  { value: 'No loss', label: 'No Loss' },\n  { value: 'crop', label: 'Crop Damage' },\n  { value: 'livestock', label: 'Livestock Loss' },\n  { value: 'property', label: 'Property Damage' },\n  { value: 'fencing', label: 'Fencing Damage' },\n  { value: 'solar panels', label: 'Solar Panel Damage' },\n  { value: 'FD establishment', label: 'FD Establishment Damage' },\n  { value: 'Other', label: 'Other Loss' }\n];\n\nexport const ObservationTypeStep: React.FC = () => {\n  const { formData, updateFormData } = useActivityForm();\n\n  const handleObservationTypeChange = (value: ObservationType) => {\n    updateFormData({ observation_type: value });\n  };\n\n  // Debounced handlers for number inputs\n  const debouncedSetFormData = useMemo(\n    () => debounce((updates: Partial<typeof formData>) => {\n      updateFormData(updates);\n    }, 300),\n    [updateFormData]\n  );\n\n  const handleNumberChange = useCallback((field: string, value: string) => {\n    const num = parseInt(value);\n    if (!isNaN(num) && num >= 0) {\n      debouncedSetFormData({ [field]: num });\n    }\n  }, [debouncedSetFormData]);\n\n  const handleSelectChange = useCallback((field: string, value: string) => {\n    updateFormData({ [field]: value });\n  }, [updateFormData]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Type of Observation</Label>\n              <RadioGroup\n                value={formData.observation_type}\n                onValueChange={handleObservationTypeChange}\n                className=\"mt-2\"\n              >\n                {observationTypes.map((type) => (\n                  <div key={type.value} className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value={type.value} id={type.value} />\n                    <Label htmlFor={type.value}>{type.label}</Label>\n                  </div>\n                ))}\n              </RadioGroup>\n            </div>\n\n            {formData.observation_type === 'indirect' && (\n  <div>\n    <Label>Indirect Sighting Type</Label>\n    <Select\n      value={formData.indirect_sighting_type || ''}\n      onValueChange={value => handleSelectChange('indirect_sighting_type', value)}\n    >\n      <SelectTrigger className=\"w-full bg-white border-gray-200 shadow-sm hover:border-blue-500 transition-colors\">\n        <SelectValue placeholder=\"Select type of indirect sighting\" />\n      </SelectTrigger>\n      <SelectContent>\n        {indirectSightingTypes.map((type) => (\n          <SelectItem key={type.value} value={type.value}>{type.label}</SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  </div>\n)}\n\n            {formData.observation_type === 'loss' && (\n  <div>\n    <Label>Loss Type</Label>\n    <Select\n      value={formData.loss_type || ''}\n      onValueChange={value => handleSelectChange('loss_type', value)}\n    >\n      <SelectTrigger className=\"w-full bg-white border-gray-200 shadow-sm hover:border-blue-500 transition-colors\">\n        <SelectValue placeholder=\"Select type of loss\" />\n      </SelectTrigger>\n      <SelectContent>\n        {lossTypes.map((type) => (\n          <SelectItem key={type.value} value={type.value}>{type.label}</SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  </div>\n)}\n          </div>\n        </CardContent>\n      </Card>\n\n      {formData.observation_type === 'direct' && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"total_elephants\">Total Elephants</Label>\n                <Input\n                  type=\"number\"\n                  id=\"total_elephants\"\n                  min=\"0\"\n                  value={formData.total_elephants || ''}\n                  onChange={(e) => handleNumberChange('total_elephants', e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"male_elephants\">Male Elephants</Label>\n                <Input\n                  type=\"number\"\n                  id=\"male_elephants\"\n                  min=\"0\"\n                  value={formData.male_elephants || ''}\n                  onChange={(e) => handleNumberChange('male_elephants', e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"female_elephants\">Female Elephants</Label>\n                <Input\n                  type=\"number\"\n                  id=\"female_elephants\"\n                  min=\"0\"\n                  value={formData.female_elephants || ''}\n                  onChange={(e) => handleNumberChange('female_elephants', e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"unknown_elephants\">Unknown Elephants</Label>\n                <Input\n                  type=\"number\"\n                  id=\"unknown_elephants\"\n                  min=\"0\"\n                  value={formData.unknown_elephants || ''}\n                  onChange={(e) => handleNumberChange('unknown_elephants', e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"calves\">Calves</Label>\n                <Input\n                  type=\"number\"\n                  id=\"calves\"\n                  min=\"0\"\n                  value={formData.calves || ''}\n                  onChange={(e) => handleNumberChange('calves', e.target.value)}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      \n\n      \n    </div>\n  );\n}; ","import { Preferences } from '@capacitor/preferences';\nimport { Capacitor } from '@capacitor/core';\nimport { Device } from '@capacitor/device';\n\n// Types for log entries\nexport enum LogLevel {\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR'\n}\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  message: string;\n  details?: any;\n  userId?: string;\n  deviceInfo?: {\n    model?: string;\n    platform?: string;\n    osVersion?: string;\n    appVersion?: string;\n  };\n}\n\n// Storage key for logs\nconst LOGS_STORAGE_KEY = 'app_detailed_logs';\n// Maximum number of logs to keep in storage\nconst MAX_LOGS = 100;\n\n// Service for comprehensive logging\nclass LoggerService {\n  private deviceInfo: any = null;\n  private userId: string | null = null;\n\n  constructor() {\n    // Initialize device info\n    this.initDeviceInfo();\n  }\n\n  /**\n   * Get device information for logs\n   */\n  async initDeviceInfo() {\n    if (Capacitor.isNativePlatform()) {\n      try {\n        this.deviceInfo = await Device.getInfo();\n      } catch (error) {\n        console.error('Failed to get device info:', error);\n        // Fallback to minimal info\n        this.deviceInfo = { \n          platform: Capacitor.getPlatform(),\n          isVirtual: false,\n          model: 'Unknown'\n        };\n      }\n    } else {\n      // Web platform info\n      this.deviceInfo = {\n        platform: 'web',\n        model: navigator.userAgent,\n        osVersion: 'unknown',\n        webViewVersion: navigator.appVersion\n      };\n    }\n  }\n\n  /**\n   * Set current user ID for logs\n   */\n  setUserId(userId: string | null) {\n    this.userId = userId;\n  }\n\n  /**\n   * Create a log entry\n   */\n  private createLogEntry(level: LogLevel, message: string, details?: any): LogEntry {\n    return {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      details,\n      userId: this.userId || undefined,\n      deviceInfo: this.deviceInfo ? {\n        model: this.deviceInfo.model,\n        platform: this.deviceInfo.platform,\n        osVersion: this.deviceInfo.osVersion,\n        appVersion: this.deviceInfo.appVersion || this.deviceInfo.appBuild\n      } : undefined\n    };\n  }\n\n  /**\n   * Save log entry to storage\n   */\n  private async saveLog(entry: LogEntry) {\n    try {\n      const { value } = await Preferences.get({ key: LOGS_STORAGE_KEY });\n      let logs: LogEntry[] = value ? JSON.parse(value) : [];\n      \n      // Add new log\n      logs.push(entry);\n      \n      // Keep only the most recent logs\n      if (logs.length > MAX_LOGS) {\n        logs = logs.slice(-MAX_LOGS);\n      }\n      \n      await Preferences.set({\n        key: LOGS_STORAGE_KEY,\n        value: JSON.stringify(logs)\n      });\n    } catch (error) {\n      // Just log to console if storage fails\n      console.error('Failed to save log:', error);\n    }\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, details?: any) {\n    const entry = this.createLogEntry(LogLevel.DEBUG, message, details);\n    console.debug(`[DEBUG] ${message}`, details || '');\n    this.saveLog(entry);\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, details?: any) {\n    const entry = this.createLogEntry(LogLevel.INFO, message, details);\n    console.info(`[INFO] ${message}`, details || '');\n    this.saveLog(entry);\n  }\n\n  /**\n   * Log a warning message\n   */\n  warn(message: string, details?: any) {\n    const entry = this.createLogEntry(LogLevel.WARN, message, details);\n    console.warn(`[WARN] ${message}`, details || '');\n    this.saveLog(entry);\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string, details?: any) {\n    const entry = this.createLogEntry(LogLevel.ERROR, message, details);\n    console.error(`[ERROR] ${message}`, details || '');\n    this.saveLog(entry);\n  }\n\n  /**\n   * Get stored logs\n   */\n  async getLogs(): Promise<LogEntry[]> {\n    try {\n      const { value } = await Preferences.get({ key: LOGS_STORAGE_KEY });\n      return value ? JSON.parse(value) : [];\n    } catch (error) {\n      console.error('Failed to get logs:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Clear all stored logs\n   */\n  async clearLogs(): Promise<void> {\n    try {\n      await Preferences.remove({ key: LOGS_STORAGE_KEY });\n    } catch (error) {\n      console.error('Failed to clear logs:', error);\n    }\n  }\n\n  /**\n   * Export logs as a JSON string\n   */\n  async exportLogs(): Promise<string> {\n    const logs = await this.getLogs();\n    return JSON.stringify(logs, null, 2);\n  }\n}\n\n// Create single instance\nexport const logger = new LoggerService();\n","import { Capacitor } from '@capacitor/core';\nimport { logger } from './loggerService';\nimport { Motion } from '@capacitor/motion';\nimport { Geolocation, Position } from '@capacitor/geolocation';\n\ninterface CompassReading {\n  // Alpha is the compass direction (0-360 degrees, 0 = north)\n  alpha: number;\n  // Beta is the front-to-back tilt (pitch)\n  beta: number;\n  // Gamma is the left-to-right tilt (roll)\n  gamma: number;\n  // Optional true bearing if using DeviceOrientation API with absolute values\n  trueBearing?: number;\n  // Timestamp of reading\n  timestamp: number;\n  // Accuracy of reading in degrees (if available)\n  accuracy?: number;\n  // Source of the compass reading (device, gps, manual)\n  source?: 'device' | 'gps' | 'manual';\n}\n\ninterface GeoPosition {\n  latitude: number;\n  longitude: number;\n  accuracy?: number;\n  timestamp?: number;\n}\n\n// Compass events listeners\ntype CompassCallback = (reading: CompassReading) => void;\nconst compassListeners: CompassCallback[] = [];\n\n// Track if compass is initialized\nlet compassInitialized = false;\nlet hasPermission = false;\nlet isAbsolute = false;\nlet isWebKit = false;\n\n// Check if device supports compass\nexport const isCompassAvailable = (): boolean => {\n  // Check if DeviceOrientationEvent exists\n  if (typeof DeviceOrientationEvent === 'undefined') {\n    logger.warn('DeviceOrientationEvent is not supported on this device');\n    return false;\n  }\n  \n  return true;\n};\n\n// Request permission to access device orientation\nexport const requestCompassPermission = async (): Promise<boolean> => {\n  try {\n    if (!isCompassAvailable()) {\n      return false;\n    }\n    \n    // For iOS 13+ devices\n    if (Capacitor.getPlatform() === 'ios') {\n      const iosPermissionAPI = (DeviceOrientationEvent as any).requestPermission;\n      \n      if (typeof iosPermissionAPI === 'function') {\n        const permission = await iosPermissionAPI();\n        hasPermission = permission === 'granted';\n        logger.info(`iOS device orientation permission: ${hasPermission ? 'granted' : 'denied'}`);\n        return hasPermission;\n      }\n    }\n    \n    // For other platforms, assume permission is granted\n    hasPermission = true;\n    return true;\n  } catch (error) {\n    logger.error('Error requesting compass permission:', error);\n    return false;\n  }\n};\n\n// Apply calibration adjustment to the compass reading\nconst calibrateReading = (reading: CompassReading): CompassReading => {\n  // Implement any necessary calibration\n  // This could include magnetic declination adjustment or device-specific adjustments\n  \n  // For now, just return the reading as-is\n  return reading;\n};\n\n// Handle device orientation event\nconst handleOrientation = (event: DeviceOrientationEvent) => {\n  if (!event.alpha && event.alpha !== 0) {\n    logger.warn('Received device orientation event without alpha value');\n    return;\n  }\n  \n  const reading: CompassReading = {\n    alpha: event.alpha,\n    beta: event.beta || 0,\n    gamma: event.gamma || 0,\n    timestamp: Date.now()\n  };\n  \n  // Check if we're getting absolute values (true north)\n  if ((event as any).absolute || isAbsolute) {\n    reading.trueBearing = event.alpha;\n  } else if (isWebKit && (event as any).webkitCompassHeading) {\n    // iOS devices provide webkitCompassHeading (inverted compared to alpha)\n    reading.trueBearing = (event as any).webkitCompassHeading;\n    reading.accuracy = (event as any).webkitCompassAccuracy;\n  }\n  \n  // Apply any calibration\n  const calibratedReading = calibrateReading(reading);\n  \n  // Notify all listeners\n  compassListeners.forEach(listener => {\n    try {\n      listener(calibratedReading);\n    } catch (error) {\n      logger.error('Error in compass listener callback:', error);\n    }\n  });\n};\n\n// Initialize the compass service\nexport const initCompass = async (): Promise<boolean> => {\n  if (compassInitialized) {\n    return true;\n  }\n  \n  try {\n    if (!isCompassAvailable()) {\n      return false;\n    }\n    \n    // Request permission if needed\n    const hasPerms = await requestCompassPermission();\n    if (!hasPerms) {\n      logger.warn('Compass permissions denied');\n      return false;\n    }\n    \n    // Check if we're on an iOS device\n    isWebKit = typeof (window as any).DeviceOrientationEvent !== 'undefined' && \n               typeof (DeviceOrientationEvent as any).webkitCompassHeading !== 'undefined';\n    \n    // Check if absolute values are available\n    isAbsolute = typeof (DeviceOrientationEvent as any).absolute !== 'undefined';\n    \n    // Register device orientation event listener\n    window.addEventListener('deviceorientation', handleOrientation, true);\n    \n    // Try to also use Capacitor Motion if available\n    if (Capacitor.isPluginAvailable('Motion')) {\n      try {\n        await Motion.addListener('orientation', data => {\n          const motionReading: CompassReading = {\n            alpha: data.alpha,\n            beta: data.beta,\n            gamma: data.gamma,\n            timestamp: Date.now()\n          };\n          \n          // Notify all listeners with Capacitor Motion data\n          compassListeners.forEach(listener => {\n            try {\n              listener(motionReading);\n            } catch (error) {\n              logger.error('Error in motion listener callback:', error);\n            }\n          });\n        });\n      } catch (motionError) {\n        logger.warn('Error setting up Capacitor Motion:', motionError);\n      }\n    }\n    \n    compassInitialized = true;\n    logger.info('Compass initialized successfully');\n    return true;\n  } catch (error) {\n    logger.error('Error initializing compass:', error);\n    return false;\n  }\n};\n\n// Clean up compass event listeners\nexport const cleanupCompass = (): void => {\n  if (!compassInitialized) {\n    return;\n  }\n  \n  window.removeEventListener('deviceorientation', handleOrientation, true);\n  \n  if (Capacitor.isPluginAvailable('Motion')) {\n    Motion.removeAllListeners();\n  }\n  \n  compassListeners.length = 0;\n  compassInitialized = false;\n};\n\n// Subscribe to compass updates\nexport const subscribeToCompass = (callback: CompassCallback): number => {\n  compassListeners.push(callback);\n  return compassListeners.length - 1;\n};\n\n// Unsubscribe from compass updates\nexport const unsubscribeFromCompass = (index: number): void => {\n  if (index >= 0 && index < compassListeners.length) {\n    compassListeners.splice(index, 1);\n  }\n};\n\n// Get current device heading as a cardinal direction\nexport const getCardinalDirection = (heading: number): string => {\n  const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', \n                      'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\n  const index = Math.round(heading / 22.5);\n  return directions[index];\n};\n\n// Get a single compass reading (useful for one-time measurements)\nexport const getCurrentHeading = async (): Promise<CompassReading | null> => {\n  if (!compassInitialized) {\n    await initCompass();\n  }\n  \n  return new Promise((resolve) => {\n    // Set a timeout in case we don't get an orientation event\n    const timeoutId = setTimeout(() => {\n      logger.warn('Compass reading timed out');\n      unsubscribeFromCompass(listenerIndex);\n      resolve(null);\n    }, 3000);\n    \n    // Subscribe for a single reading\n    const listenerIndex = subscribeToCompass((reading) => {\n      clearTimeout(timeoutId);\n      unsubscribeFromCompass(listenerIndex);\n      resolve(reading);\n    });\n  });\n};\n\n// Calculate bearing between two geo positions (in degrees, 0-360, 0 = north)\nexport const calculateBearing = (start: GeoPosition, end: GeoPosition): number => {\n  // Convert to radians\n  const startLat = start.latitude * Math.PI / 180;\n  const startLng = start.longitude * Math.PI / 180;\n  const endLat = end.latitude * Math.PI / 180;\n  const endLng = end.longitude * Math.PI / 180;\n\n  // Calculate bearing\n  const y = Math.sin(endLng - startLng) * Math.cos(endLat);\n  const x = Math.cos(startLat) * Math.sin(endLat) -\n            Math.sin(startLat) * Math.cos(endLat) * Math.cos(endLng - startLng);\n  \n  let bearing = Math.atan2(y, x) * 180 / Math.PI;\n  bearing = (bearing + 360) % 360; // Normalize to 0-360\n  \n  return bearing;\n};\n\n// Get current device position\nexport const getCurrentPosition = async (): Promise<Position | null> => {\n  try {\n    const options = { enableHighAccuracy: true, timeout: 10000 };\n    return await Geolocation.getCurrentPosition(options);\n  } catch (error) {\n    logger.error('Error getting device position:', error);\n    return null;\n  }\n};\n\n// Calculate bearing from current position to a target position\nexport const getBearingToPosition = async (target: GeoPosition): Promise<{\n  bearing: number | null;\n  currentPosition: Position | null;\n  accuracy: number;\n}> => {\n  try {\n    const position = await getCurrentPosition();\n    if (!position) {\n      return { bearing: null, currentPosition: null, accuracy: 0 };\n    }\n    \n    const start = {\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    };\n    \n    const bearing = calculateBearing(start, target);\n    \n    // Calculate accuracy based on GPS accuracy\n    let accuracy = 1;\n    if (position.coords.accuracy) {\n      accuracy = Math.min(1, 20 / Math.max(position.coords.accuracy, 1)); // 1.0 for <= 20m accuracy\n    }\n    \n    return { bearing, currentPosition: position, accuracy };\n  } catch (error) {\n    logger.error('Error calculating bearing to position:', error);\n    return { bearing: null, currentPosition: null, accuracy: 0 };\n  }\n};\n","import { useState, useEffect, useCallback, useRef } from 'react';\nimport { useActivityForm } from '@/contexts/ActivityFormContext';\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Compass, RefreshCw, Navigation, MapPin, ArrowRight, XCircle, Lock as LockClosed, Unlock as LockOpen } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { Progress } from \"@/components/ui/progress\";\nimport * as compassService from '@/utils/compassService';\nimport { logger } from '@/utils/loggerService';\nimport { Capacitor } from '@capacitor/core';\n\ninterface GeoPosition {\n  latitude: number;\n  longitude: number;\n}\n\ninterface CompassState {\n  heading: number | null;\n  accuracy: number; // 0-1 where 1 is most accurate\n  isGPSBased: boolean;\n  isValid: boolean;\n  lastUpdated: number;\n  currentPosition: GeoPosition | null;\n  targetPosition: GeoPosition | null;\n}\n\nexport function CompassBearingStep() {\n  const { formData, updateFormData } = useActivityForm();\n  const [isTracking, setIsTracking] = useState(false);\n  const [isLocked, setIsLocked] = useState(false);\n  const [isPointingMode, setIsPointingMode] = useState(false);\n  const [compassState, setCompassState] = useState<CompassState>({\n    heading: null,\n    accuracy: 0,\n    isGPSBased: false,\n    isValid: false,\n    lastUpdated: 0,\n    currentPosition: null,\n    targetPosition: null\n  });\n  \n  const lastHeading = useRef<number | null>(null);\n  const watchId = useRef<number | null>(null);\n\n  // Initialize compass and get initial position on component mount\n  useEffect(() => {\n    // Log platform information\n    logger.info(`Device platform: ${Capacitor.getPlatform()}`);\n\n    // Initialize compass and get initial position\n    const initialize = async () => {\n      try {\n        // Check if compass is available\n        if (!compassService.isCompassAvailable()) {\n          toast.error(\"Compass is not available on this device\");\n          return;\n        }\n        \n        // Request permissions and initialize compass\n        if (await compassService.requestCompassPermission()) {\n          logger.info(\"Compass permission granted\");\n          await compassService.initCompass();\n          toast.success(\"Compass initialized successfully\");\n          \n          // Get initial position\n          const position = await compassService.getCurrentPosition();\n          if (position && position.coords) {\n            setCompassState(prev => ({\n              ...prev,\n              currentPosition: {\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude\n              }\n            }));\n            logger.info(\"Initial position acquired\", {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            });\n          }\n        } else {\n          logger.warn(\"Compass permission denied\");\n          toast.error(\"Compass access denied\");\n        }\n      } catch (error) {\n        logger.error(\"Error initializing compass:\", error);\n        toast.error(\"Failed to initialize compass\");\n      }\n    };\n    \n    initialize();\n\n    return () => {\n      // Clean up resources\n      compassService.cleanupCompass();\n      \n      if (watchId.current !== null) {\n        navigator.geolocation.clearWatch(watchId.current);\n      }\n    };\n  }, []);\n\n  // Handle manual compass bearing entry\n  const handleCompassBearingChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value >= 0 && value <= 360) {\n      updateFormData({ compass_bearing: value });\n      setCompassState(prev => ({\n        ...prev,\n        heading: value,\n        isGPSBased: false,\n        isValid: true,\n        lastUpdated: Date.now()\n      }));\n    }\n  };\n\n  // Get bearing to the target position (elephant location)\n  const calculateBearingToTarget = useCallback(async (targetLat: number, targetLng: number) => {\n    if (!isTracking) return;\n    \n    try {\n      // Save the target position\n      const targetPosition = {\n        latitude: targetLat,\n        longitude: targetLng\n      };\n      \n      setCompassState(prev => ({\n        ...prev,\n        targetPosition\n      }));\n      \n      // Calculate bearing using the service\n      const result = await compassService.getBearingToPosition(targetPosition);\n      \n      if (result.bearing !== null) {\n        // Round to nearest whole degree\n        const roundedBearing = Math.round(result.bearing);\n        \n        setCompassState(prev => ({\n          ...prev,\n          heading: roundedBearing,\n          accuracy: result.accuracy,\n          isGPSBased: true,\n          isValid: true,\n          currentPosition: result.currentPosition?.coords ? {\n            latitude: result.currentPosition.coords.latitude,\n            longitude: result.currentPosition.coords.longitude\n          } : prev.currentPosition,\n          lastUpdated: Date.now()\n        }));\n        \n        // Update the form with the new bearing value\n        if (!isLocked) {\n          updateFormData({ compass_bearing: roundedBearing });\n          toast.success(`Bearing calculated: ${roundedBearing}°`);\n        }\n        \n        return roundedBearing;\n      } else {\n        toast.error(\"Could not calculate bearing. Please try again\");\n        return null;\n      }\n    } catch (error) {\n      logger.error(\"Error calculating bearing:\", error);\n      toast.error(\"Failed to calculate bearing\");\n      return null;\n    }\n  }, [isTracking, isLocked, updateFormData]);\n\n  // Handle device orientation events from compass service\n  const handleCompassReading = useCallback((reading: {\n    alpha: number;\n    beta: number;\n    gamma: number;\n    trueBearing?: number;\n    timestamp: number;\n    accuracy?: number;\n    source?: 'device' | 'gps' | 'manual';\n  }) => {\n    if (!isTracking || isLocked) return;\n    \n    // Get the most accurate heading available\n    let heading = 0;\n    if (reading.trueBearing !== undefined) {\n      // Use true bearing if available (from iOS webkitCompassHeading)\n      heading = Math.round(reading.trueBearing);\n    } else {\n      // Fall back to alpha with conversion for standard deviceorientation\n      heading = Math.round((360 - reading.alpha) % 360);\n    }\n    \n    // Store the raw heading\n    lastHeading.current = heading;\n    \n    // Log compass data for debugging\n    logger.debug('Compass reading', { \n      heading: heading,\n      source: reading.source || 'device',\n      accuracy: reading.accuracy || 'unknown',\n      beta: reading.beta,\n      gamma: reading.gamma\n    });\n    \n    // Only update if not using GPS-based bearing\n    if (!compassState.isGPSBased) {\n      setCompassState(prev => ({\n        ...prev,\n        heading: heading,\n        accuracy: reading.accuracy || 0.7,\n        isGPSBased: false,\n        isValid: true,\n        lastUpdated: Date.now()\n      }));\n      \n      if (!isLocked) {\n        updateFormData({ compass_bearing: heading });\n      }\n    }\n  }, [isTracking, isLocked, updateFormData, compassState.isGPSBased]);\n\n  useEffect(() => {\n    if (isTracking) {\n      // Subscribe to compass readings from device orientation\n      const compassIndex = compassService.subscribeToCompass(handleCompassReading);\n      \n      // Start location watching for accurate position updates\n      watchId.current = navigator.geolocation.watchPosition(\n        (position) => {\n          // Update the current position in state\n          if (position && position.coords) {\n            setCompassState(prev => ({\n              ...prev,\n              currentPosition: {\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude\n              },\n              lastUpdated: Date.now()\n            }));\n            \n            // If we have a target position, recalculate the bearing\n            if (compassState.targetPosition) {\n              calculateBearingToTarget(\n                compassState.targetPosition.latitude,\n                compassState.targetPosition.longitude\n              );\n            }\n          }\n        },\n        (error) => {\n          logger.error('GPS Error:', error);\n          toast.error(`GPS error: ${error.message}`);\n        },\n        { enableHighAccuracy: true, maximumAge: 10000, timeout: 15000 }\n      );\n      \n      // Return cleanup function\n      return () => {\n        compassService.unsubscribeFromCompass(compassIndex);\n        if (watchId.current !== null) {\n          navigator.geolocation.clearWatch(watchId.current);\n        }\n      };\n    }\n    \n    return () => {\n      if (watchId.current !== null) {\n        navigator.geolocation.clearWatch(watchId.current);\n      }\n    };\n  }, [isTracking, handleCompassReading, calculateBearingToTarget, compassState.targetPosition]);\n\n  const toggleTracking = async () => {\n    // If starting tracking, ensure compass service is initialized\n    if (!isTracking) {\n      try {\n        // Make sure compass is initialized\n        if (!await compassService.initCompass()) {\n          toast.error(\"Could not initialize compass service\");\n          return;\n        }\n        \n        // Start tracking\n        setIsTracking(true);\n        toast.success(\"Bearing tracking started\");\n      } catch (error) {\n        logger.error(\"Error starting compass tracking:\", error);\n        toast.error(\"Failed to start bearing tracking\");\n      }\n    } else {\n      // Stop tracking\n      setIsTracking(false);\n      setIsLocked(false);\n      toast.info(\"Bearing tracking stopped\");\n    }\n  };\n\n  const toggleLock = () => {\n    setIsLocked(!isLocked);\n    if (!isLocked) {\n      toast.info(\"Bearing locked\");\n    } else {\n      toast.info(\"Bearing unlocked\");\n    }\n  };\n  \n  const getTargetLocation = async () => {\n    try {\n      setIsPointingMode(true);\n      toast.info(\"Point your device at the elephant's location and tap 'Set Target'.\");\n    } catch (error) {\n      logger.error(\"Error setting pointing mode:\", error);\n      toast.error(\"Failed to enter pointing mode\");\n      setIsPointingMode(false);\n    }\n  };\n  \n  const setTarget = async () => {\n    // Get the current position as the target for the elephant\n    const position = await compassService.getCurrentPosition();\n    if (!position || !position.coords) {\n      toast.error(\"Could not get current position. Please try again.\");\n      return;\n    }\n    \n    const targetPosition = {\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    };\n    \n    setCompassState(prev => ({\n      ...prev,\n      targetPosition\n    }));\n    \n    toast.success(\"Target position set successfully\");\n    setIsPointingMode(false);\n    \n    // If we have current position, calculate bearing immediately\n    if (compassState.currentPosition) {\n      calculateBearingToTarget(targetPosition.latitude, targetPosition.longitude);\n    }\n  };\n\n  const getAccuracyColor = (accuracy: number) => {\n    if (accuracy > 0.8) return 'text-green-500';\n    if (accuracy > 0.5) return 'text-amber-500';\n    return 'text-red-500';\n  };\n\n  // Removed unused getAccuracyClass function\n\n  const getAccuracyLabel = (accuracy: number) => {\n    if (accuracy > 0.8) return 'High';\n    if (accuracy > 0.5) return 'Medium';\n    return 'Low';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex flex-col gap-4\">\n              <div className=\"flex items-center justify-between gap-4\">\n                <h3 className=\"text-lg font-medium\">Compass Bearing</h3>\n                <div className=\"flex items-center gap-2\">\n                  {isTracking ? (\n                    <>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={toggleTracking}\n                        className=\"gap-1\"\n                      >\n                        <XCircle className=\"h-4 w-4\" />\n                        Stop\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={toggleLock}\n                        className=\"gap-1\"\n                      >\n                        {isLocked ? (\n                          <>\n                            <LockOpen className=\"h-4 w-4\" />\n                            Unlock\n                          </>\n                        ) : (\n                          <>\n                            <LockClosed className=\"h-4 w-4\" />\n                            Lock\n                          </>\n                        )}\n                      </Button>\n                    </>\n                  ) : (\n                    <Button \n                      variant=\"default\" \n                      size=\"sm\" \n                      onClick={toggleTracking}\n                      className=\"gap-1\"\n                    >\n                      <Compass className=\"h-4 w-4\" />\n                      Start Tracking\n                    </Button>\n                  )}\n                </div>\n              </div>\n\n              {/* Main compass UI */}\n              <div className=\"flex flex-col items-center space-y-4\">\n                {/* Compass rose visualization */}\n                <div \n                  className=\"relative w-48 h-48 rounded-full border-2 border-gray-300 flex items-center justify-center\"\n                  style={{\n                    transform: `rotate(${compassState.heading || 0}deg)`\n                  }}\n                >\n                  <div className=\"absolute top-0 left-1/2 -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-primary rounded-full\" />\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <Navigation className=\"h-12 w-12 text-primary\" />\n                  </div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold\">\n                    {compassState.heading !== null ? `${compassState.heading}°` : \"--°\"}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {compassState.isGPSBased ? \"GPS-calculated bearing\" : \"Device orientation\"}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Target position controls */}\n              {isTracking && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Target Position</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {compassState.targetPosition ? \n                        `${compassState.targetPosition.latitude.toFixed(6)}, ${compassState.targetPosition.longitude.toFixed(6)}` : \n                        \"Not set\"}\n                    </span>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={getTargetLocation}\n                      className=\"flex-1 gap-1\"\n                      disabled={isPointingMode}\n                    >\n                      <MapPin className=\"h-4 w-4\" />\n                      Set Target\n                    </Button>\n                    {compassState.currentPosition && compassState.targetPosition && (\n                      <Button\n                        onClick={() => calculateBearingToTarget(\n                          compassState.targetPosition!.latitude,\n                          compassState.targetPosition!.longitude\n                        )}\n                        className=\"flex-1 gap-1\"\n                        disabled={!compassState.currentPosition || !compassState.targetPosition}\n                      >\n                        <ArrowRight className=\"h-4 w-4\" />\n                        Calculate Bearing\n                      </Button>\n                    )}\n                  </div>\n                  {isPointingMode && (\n                    <div className=\"mt-2 flex justify-between gap-2\">\n                      <Button \n                        variant=\"default\" \n                        onClick={setTarget} \n                        className=\"flex-1\"\n                      >\n                        Confirm Target\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsPointingMode(false)} \n                        className=\"flex-1\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Accuracy indicator */}\n              {isTracking && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Accuracy</span>\n                    <span className=\"font-medium\" style={{ color: getAccuracyColor(compassState.accuracy) }}>\n                      {getAccuracyLabel(compassState.accuracy)}\n                    </span>\n                  </div>\n                  <Progress \n                    value={compassState.accuracy * 100} \n                    className={`h-2 bg-${getAccuracyColor(compassState.accuracy).replace('text-', '')}`} \n                  />\n                </div>\n              )}\n\n              {/* Manual input */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"compass-bearing\">Bearing Value (0-360°)</Label>\n                <div className=\"flex gap-2\">\n                  <Input \n                    id=\"compass-bearing\"\n                    type=\"number\" \n                    min={0} \n                    max={360} \n                    step={1}\n                    value={formData.compass_bearing || ''} \n                    onChange={handleCompassBearingChange}\n                    className=\"flex-1\"\n                  />\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      if (!isTracking) {\n                        toggleTracking();\n                      } else if (compassState.heading !== null) {\n                        updateFormData({ compass_bearing: compassState.heading });\n                      }\n                    }}\n                    className=\"gap-1\"\n                  >\n                    <RefreshCw className=\"h-4 w-4\" />\n                    Get Current\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Help text */}\n            {isTracking && (\n              <div className=\"text-sm text-muted-foreground\">\n                <p>\n                  For best results, hold your device flat and point it in the direction of the elephant. \n                  The bearing will be calculated automatically.\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","import React, { useState, useRef } from 'react';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { useActivityForm } from '@/contexts/ActivityFormContext';\nimport { Camera, Upload } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { supabase } from '@/lib/supabase';\n\nexport const PhotoStep: React.FC = () => {\n  const { formData, updateFormData, setIsPhotoUploading } = useActivityForm();\n  const [isUploading, setIsUploadingLocal] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast.error('Please select an image file');\n      return;\n    }\n\n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast.error('Image size should be less than 5MB');\n      return;\n    }\n\n    console.log('handleFileChange: Starting photo upload process');\n    setIsUploadingLocal(true);\n    setIsPhotoUploading(true);\n    console.log('handleFileChange: isUploadingLocal and isPhotoUploading set to true');\n    try {\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${Math.random()}.${fileExt}`;\n      const filePath = `activity-photos/${fileName}`;\n\n      const uploadPromise = supabase.storage\n        .from('photos')\n        .upload(filePath, file);\n\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        const id = setTimeout(() => {\n          clearTimeout(id);\n          reject(new Error('Photo upload timed out (30 seconds)'));\n        }, 30000); // 30 seconds\n      });\n\n      const result = await Promise.race([\n        uploadPromise,\n        timeoutPromise\n      ]);\n\n      // Check if the result is an error from the timeout or Supabase\n      if (result && typeof result === 'object' && 'error' in result && result.error) {\n        console.error('handleFileChange: Supabase upload error:', result.error);\n        throw result.error;\n      } else if (result instanceof Error) { // This handles the timeout error\n        console.error('handleFileChange: Timeout error:', result.message);\n        toast.error(result.message); // Display the timeout message to the user\n        throw result; // Re-throw to ensure finally block is reached\n      }\n\n      const { data: { publicUrl } } = supabase.storage\n        .from('photos')\n        .getPublicUrl(filePath);\n\n      updateFormData({ photo_url: publicUrl });\n      console.log('handleFileChange: Photo uploaded successfully. Public URL:', publicUrl);\n      toast.success('Photo uploaded successfully');\n    } catch (error) {\n      console.error('handleFileChange: Caught error during photo upload:', error);\n      // Only show a generic error if it's not the specific timeout error already handled\n      if (!(error instanceof Error && error.message.includes('timed out')))\n      {\n        toast.error('Failed to upload photo. Please try again.');\n      }\n    } finally {\n      console.log('handleFileChange: Finally block executed. Setting isUploadingLocal and isPhotoUploading to false');\n      setIsUploadingLocal(false);\n      setIsPhotoUploading(false);\n    }\n  };\n\n  const handleCameraClick = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Photo</Label>\n              <div className=\"mt-2 flex flex-col items-center justify-center\">\n                {formData.photo_url ? (\n                  <div className=\"relative w-full max-w-md\">\n                    <img\n                      src={formData.photo_url}\n                      alt=\"Activity photo\"\n                      className=\"w-full h-64 object-cover rounded-lg\"\n                    />\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"absolute top-2 right-2\"\n                      onClick={() => updateFormData({ photo_url: undefined })}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"w-full max-w-md h-64 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center\">\n                    <Camera className=\"w-12 h-12 text-gray-400 mb-4\" />\n                    <p className=\"text-gray-500 mb-4\">No photo selected</p>\n                    <Button\n                      onClick={handleCameraClick}\n                      disabled={isUploading}\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      {isUploading ? 'Uploading...' : 'Upload Photo'}\n                    </Button>\n                    <input\n                      ref={fileInputRef}\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleFileChange}\n                      className=\"hidden\"\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}; ","import React, { useState, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, FileText, Compass, Camera } from \"lucide-react\";\nimport { ActivityFormProvider, useActivityForm, FormStep } from '@/contexts/ActivityFormContext';\nimport { DateTimeLocationStep } from '@/components/form-steps/DateTimeLocationStep';\nimport { ObservationTypeStep } from '@/components/form-steps/ObservationTypeStep';\nimport { CompassBearingStep } from '@/components/form-steps/CompassBearingStep';\nimport { PhotoStep } from '@/components/form-steps/PhotoStep';\nimport { toast } from \"sonner\";\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/contexts/NewAuthContext';\nimport { supabase } from '@/lib/supabaseClient';\nimport { ActivityReport, ObservationType, IndirectSightingType, LossType } from '@/types/activity-report';\n\ninterface StepConfig {\n  type: FormStep;\n  title: string;\n  icon: React.ReactNode;\n  component: React.ComponentType;\n}\n\nconst steps: StepConfig[] = [\n  {\n    type: 'dateTimeLocation',\n    title: \"Date/Time & Location\",\n    icon: <MapPin className=\"w-5 h-5\" />,\n    component: DateTimeLocationStep,\n  },\n  {\n    type: 'observationType',\n    title: \"Type of Observation\",\n    icon: <FileText className=\"w-5 h-5\" />,\n    component: ObservationTypeStep,\n  },\n  {\n    type: 'compassBearing',\n    title: \"Compass Bearing\",\n    icon: <Compass className=\"w-5 h-5\" />,\n    component: CompassBearingStep,\n  },\n  {\n    type: 'photo',\n    title: \"Photo\",\n    icon: <Camera className=\"w-5 h-5\" />,\n    component: PhotoStep,\n  },\n];\n\ninterface ActivityReportStepperProps {\n  onSubmit: (reportData: Partial<ActivityReport>) => Promise<void>;\n  isSubmitting: boolean;\n}\n\ninterface ActivityFormData {\n  observation_type: ObservationType;\n  latitude: string | number;\n  longitude: string | number;\n  photo_url?: string | null;\n  indirect_sighting_type?: IndirectSightingType | null;\n  loss_type?: LossType | null;\n  activity_date?: Date;\n  activity_time?: string;\n}\n\nconst formatDate = (date: Date | string | undefined): string => {\n  if (!date) return '';\n  const d = date instanceof Date ? date : new Date(date);\n  return d.toISOString().split('T')[0];\n};\n\nconst StepperContent: React.FC<ActivityReportStepperProps> = ({ onSubmit, isSubmitting: externalIsSubmitting }) => {\n  const { currentStep, formData, goToNextStep, goToPreviousStep, isStepValid, isLastStep, resetForm, isPhotoUploading } = useActivityForm();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const currentStepIndex = steps.findIndex(step => step.type === currentStep);\n\n  \n  const isActuallySubmitting = isSubmitting || externalIsSubmitting;\n\n  const handleSubmit = useCallback(async () => {\n    console.log('handleSubmit: Starting form submission.');\n    try {\n      setIsSubmitting(true);\n      console.log('handleSubmit: isSubmitting set to true.');\n\n      \n      if (!formData.activity_date || !formData.activity_time || !formData.observation_type) {\n        toast.error('Please fill in all required fields');\n        return;\n      }\n\n      let userId = user?.id || null;\n      \n      if (!userId) {\n        const { data: { session } } = await supabase.auth.getSession();\n        if (session?.user) {\n          userId = session.user.id;\n        }\n      }\n      \n      const formattedDate = formatDate(formData.activity_date);\n      const formattedTime = formData.activity_time || '';\n      \n      // Prepare the report data with all required fields\n      const reportData: Partial<ActivityReport> = {\n        // Required fields\n        user_id: userId || '',\n\n        activity_date: new Date(formattedDate),\n        activity_time: formattedTime,\n        observation_type: formData.observation_type as ObservationType,\n        latitude: String(formData.latitude || '0'),\n        longitude: String(formData.longitude || '0'),\n\n        \n        // Optional fields with type conversion\n        total_elephants: formData.total_elephants ? Number(formData.total_elephants) : undefined,\n        male_elephants: formData.male_elephants ? Number(formData.male_elephants) : undefined,\n        female_elephants: formData.female_elephants ? Number(formData.female_elephants) : undefined,\n        unknown_elephants: formData.unknown_elephants ? Number(formData.unknown_elephants) : undefined,\n        calves: formData.calves ? Number(formData.calves) : undefined,\n        compass_bearing: formData.compass_bearing ? Number(formData.compass_bearing) : undefined,\n        photo_url: formData.photo_url || undefined,\n        indirect_sighting_type: formData.indirect_sighting_type as IndirectSightingType | undefined,\n        loss_type: formData.loss_type as LossType | undefined\n      };\n      \n      // Ensure required fields are present\n      if (!reportData.observation_type) {\n        throw new Error('Observation type is required');\n      }\n      if (!reportData.latitude || !reportData.longitude) {\n        throw new Error('Location is required');\n      }\n      \n      try {\n        await onSubmit(reportData);\n        toast.success('Activity report submitted successfully');\n        resetForm();\n        navigate('/');\n      } catch (error) {\n        console.error('handleSubmit: Error submitting report:', error);\n        toast.error('Failed to submit report');\n      } finally {\n        // Ensure isSubmitting is set to false even if onSubmit throws an error\n        // This is already handled by the outer finally, but adding here for clarity/redundancy\n        setIsSubmitting(false);\n        console.log('handleSubmit: Inner try-catch finally block. isSubmitting set to false.');\n      }\n    } catch (error: any) {\n      console.error('Error submitting activity report:', error);\n      toast.error(error.message || 'Failed to submit report');\n    } finally {\n      setIsSubmitting(false);\n      console.log('handleSubmit: Outer finally block. isSubmitting set to false.');\n    }\n  }, [formData, navigate, onSubmit, resetForm, user]);\n\n  const CurrentStepComponent = steps.find(step => step.type === currentStep)?.component || null;\n\n\n\n  return (\n    <div className=\"container mx-auto p-2 sm:p-4\">\n      <Card className=\"w-full max-w-full sm:max-w-2xl bg-white rounded-xl shadow-sm border border-gray-100 mx-auto\">\n        <CardHeader className=\"space-y-4 sm:space-y-6 p-4 sm:p-6 border-b border-gray-100\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2 sm:gap-0\">\n            <CardTitle className=\"text-lg sm:text-2xl font-bold text-gray-900\">\n              Elephant Watch Report\n            </CardTitle>\n            <div className=\"flex items-center gap-2 sm:gap-3 w-full sm:w-auto\">\n              <span className=\"text-xs sm:text-sm font-medium text-gray-600\">\n                Step {currentStepIndex + 1} of {steps.length}\n              </span>\n              <Progress \n                value={((currentStepIndex + 1) / steps.length) * 100} \n                className=\"w-full sm:w-48 h-2 bg-gray-100\" \n              />\n            </div>\n          </div>\n          <div className=\"flex flex-nowrap overflow-x-auto gap-2 pb-2 sm:pb-0 -mx-2 sm:mx-0 px-2 sm:px-0\">\n            {steps.map((step, index) => (\n              <Button\n                key={step.type}\n                variant={index === currentStepIndex ? \"default\" : \"outline\"}\n                size=\"sm\"\n                className={\n                  `flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-2 rounded-md transition-colors whitespace-nowrap text-xs sm:text-sm\n                  ${index === currentStepIndex \n                    ? 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600' \n                    : 'bg-white hover:bg-gray-50 text-gray-600 border-gray-200'}`\n                }\n                disabled={index > currentStepIndex && !isStepValid(steps[index - 1].type)}\n              >\n                {step.icon}\n                {step.title}\n              </Button>\n            ))}\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-4 sm:p-6\">\n          {CurrentStepComponent && <CurrentStepComponent />}\n          <div className=\"flex flex-col sm:flex-row justify-between mt-6 sm:mt-8 pt-4 sm:pt-6 border-t border-gray-100 gap-2 sm:gap-0\">\n            <Button\n              variant=\"outline\"\n              onClick={goToPreviousStep}\n              disabled={currentStepIndex === 0 || isActuallySubmitting}\n              className=\"border-gray-200 text-gray-600 hover:bg-gray-50 w-full sm:w-auto\"\n            >\n              Previous\n            </Button>\n            {isLastStep() ? (\n              <Button\n                onClick={handleSubmit}\n                disabled={(() => {\n                  const isDisabled = !isStepValid(currentStep) || isActuallySubmitting || isPhotoUploading;\n                  console.log(`Submit button disabled check: isStepValid(${currentStep})=${isStepValid(currentStep)}, isActuallySubmitting=${isActuallySubmitting}, isPhotoUploading=${isPhotoUploading}. Result: ${isDisabled}`);\n                  return isDisabled;\n                })()}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white w-full sm:w-auto\"\n              >\n                {isPhotoUploading ? 'Uploading Photo...' : (isActuallySubmitting ? 'Submitting...' : 'Submit Report')}\n              </Button>\n            ) : (\n              <Button\n                onClick={goToNextStep}\n                disabled={!isStepValid(currentStep) || isActuallySubmitting || isPhotoUploading}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white w-full sm:w-auto\"\n              >\n                Next\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport const ActivityReportStepper: React.FC<ActivityReportStepperProps> = (props) => {\n  return (\n    <ActivityFormProvider>\n      <>\n        <StepperContent {...props} />\n      </>\n    </ActivityFormProvider>\n  );\n};\n","import { Capacitor } from '@capacitor/core';\nimport { Network } from '@capacitor/network';\n\n/**\n * Network utility functions to check connectivity status\n * and provide real-time network status updates\n */\n\nlet networkStatus: { connected: boolean } = { connected: true };\n\n// Initialize network status monitoring\nexport const initNetworkMonitoring = async () => {\n  try {\n    // Get initial network status\n    const status = await Network.getStatus();\n    networkStatus = status;\n    console.log('Initial network status:', status);\n    \n    // Listen for network status changes\n    Network.addListener('networkStatusChange', (status) => {\n      console.log('Network status changed:', status);\n      networkStatus = status;\n    });\n    \n    return status;\n  } catch (error) {\n    console.error('Error initializing network monitoring:', error);\n    // Default to considering connected if we can't determine\n    return { connected: true };\n  }\n};\n\n/**\n * Check if the device has an active network connection\n * @returns boolean indicating if the device is online\n */\nexport const isOnline = async (): Promise<boolean> => {\n  try {\n    // On web, use window.navigator.onLine\n    if (!Capacitor.isNativePlatform()) {\n      return window.navigator.onLine;\n    }\n    \n    // On native platforms, use the Network plugin\n    const status = await Network.getStatus();\n    return status.connected;\n  } catch (error) {\n    console.error('Error checking network status:', error);\n    \n    // If we can't determine, use the last known status\n    return networkStatus.connected;\n  }\n};\n\n/**\n * Get the current network connection type\n * @returns string representing the connection type ('wifi', 'cellular', 'none', etc.)\n */\nexport const getConnectionType = async (): Promise<string> => {\n  try {\n    if (!Capacitor.isNativePlatform()) {\n      return window.navigator.onLine ? 'unknown' : 'none';\n    }\n    \n    const status = await Network.getStatus();\n    return status.connectionType;\n  } catch (error) {\n    console.error('Error getting connection type:', error);\n    return 'unknown';\n  }\n};\n","import { supabase } from '@/lib/supabase';\nimport { logger } from './loggerService';\n\n/**\n * Ensures a user exists in the public.users table\n * This is needed because activity reports have a foreign key constraint\n * requiring the user_id to exist in the users table\n * \n * @param userId The auth user ID to ensure exists\n * @returns True if the user exists or was created, false if failed\n */\nexport const ensureUserExists = async (userId: string): Promise<string | null> => {\n  logger.info(`ensureUserExists called for userId: ${userId}`); // Added logging\n  if (!userId) {\n    logger.error('Cannot ensure user exists with empty userId');\n    return null;\n  }\n\n  try {\n    // First check if the user already exists\n    logger.debug(`Checking if user ${userId} already exists in public.users table`); // Added logging\n    const { data: existingUser, error: fetchError } = await supabase\n      .from('users')\n      .select('id')\n      .eq('auth_id', userId)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') { // \"Results contain 0 rows\"\n        logger.warn(`User ${userId} not found in public.users table. Not attempting to create as per instruction.`);\n        return null; // User not found, and we are not inserting\n      } else {\n        logger.error(`Error checking if user ${userId} exists:`, fetchError);\n        return null;\n      }\n    }\n\n    // If the user already exists, return true\n    if (existingUser) {\n      logger.debug(`User ${userId} already exists in public.users table. Returning ID: ${existingUser.id}`);\n      return existingUser.id;\n    }\n\n    // If we reach here, it means existingUser was null/undefined and fetchError was not PGRST116.\n    // This case should ideally not happen if single() is used correctly, but as a fallback:\n    logger.warn(`Unexpected state: User ${userId} not found, but no PGRST116 error. Not attempting to create.`);\n    return null;\n  } catch (error: any) {\n    logger.error('Unexpected error in ensureUserExists:', error);\n    return null;\n  }\n};\n","import { Preferences } from '@capacitor/preferences';\nimport { ActivityReport } from '@/types/activity-report';\nimport { v4 as uuidv4 } from 'uuid';\nimport { isOnline } from './networkUtils';\nimport { supabase } from '@/lib/supabaseClient';\nimport { ensureUserExists } from './userUtils';\nimport { logger } from './loggerService';\n\n// Key for storing pending reports\nconst PENDING_REPORTS_KEY = 'pendingActivityReports';\n\n/**\n * Interface for offline reports with additional metadata\n */\ninterface PendingReport {\n  id: string;              // Local UUID for tracking\n  reportData: Partial<ActivityReport>;\n  createdAt: string;       // ISO timestamp string\n  syncAttempts: number;    // Number of sync attempts\n  lastSyncAttempt?: string; // Last sync attempt timestamp\n}\n\n/**\n * Save an activity report for later submission when offline\n * @param reportData The activity report data to save\n * @returns The pending report with generated ID\n */\nexport const saveReportForLaterSync = async (reportData: Partial<ActivityReport>): Promise<PendingReport> => {\n  try {\n    console.log('Saving report for later sync:', reportData);\n\n    // Create a pending report with metadata\n    const pendingReport: PendingReport = {\n      id: uuidv4(),\n      reportData,\n      createdAt: new Date().toISOString(),\n      syncAttempts: 0\n    };\n\n    // Get existing pending reports\n    const { value: existingReportsJSON } = await Preferences.get({ key: PENDING_REPORTS_KEY });\n    const existingReports: PendingReport[] = existingReportsJSON ? JSON.parse(existingReportsJSON) : [];\n    \n    // Add new report to the list\n    const updatedReports = [...existingReports, pendingReport];\n    \n    // Save back to storage\n    await Preferences.set({\n      key: PENDING_REPORTS_KEY,\n      value: JSON.stringify(updatedReports)\n    });\n    \n    console.log(`Report saved for later sync. Total pending reports: ${updatedReports.length}`);\n    \n    return pendingReport;\n  } catch (error) {\n    console.error('Error saving report for later:', error);\n    throw error;\n  }\n};\n\n/**\n * Get all pending reports that haven't been synced yet\n * @returns Array of pending reports\n */\nexport const getPendingReports = async (): Promise<PendingReport[]> => {\n  try {\n    const { value: reportsJSON } = await Preferences.get({ key: PENDING_REPORTS_KEY });\n    if (!reportsJSON) {\n      return [];\n    }\n    return JSON.parse(reportsJSON);\n  } catch (error) {\n    console.error('Error getting pending reports:', error);\n    return [];\n  }\n};\n\n/**\n * Remove a successfully synced report from the pending list\n * @param reportId The ID of the report to remove\n */\nexport const removePendingReport = async (reportId: string): Promise<void> => {\n  try {\n    const { value: reportsJSON } = await Preferences.get({ key: PENDING_REPORTS_KEY });\n    if (!reportsJSON) {\n      return;\n    }\n    \n    const reports: PendingReport[] = JSON.parse(reportsJSON);\n    const updatedReports = reports.filter(report => report.id !== reportId);\n    \n    await Preferences.set({\n      key: PENDING_REPORTS_KEY,\n      value: JSON.stringify(updatedReports)\n    });\n    \n    console.log(`Removed synced report ${reportId}. Remaining: ${updatedReports.length}`);\n  } catch (error) {\n    console.error('Error removing pending report:', error);\n  }\n};\n\n/**\n * Update a pending report's sync attempt metadata\n * @param reportId The ID of the report to update\n */\nexport const updateSyncAttempt = async (reportId: string): Promise<void> => {\n  try {\n    const { value: reportsJSON } = await Preferences.get({ key: PENDING_REPORTS_KEY });\n    if (!reportsJSON) {\n      return;\n    }\n    \n    const reports: PendingReport[] = JSON.parse(reportsJSON);\n    const updatedReports = reports.map(report => {\n      if (report.id === reportId) {\n        return {\n          ...report,\n          syncAttempts: report.syncAttempts + 1,\n          lastSyncAttempt: new Date().toISOString()\n        };\n      }\n      return report;\n    });\n    \n    await Preferences.set({\n      key: PENDING_REPORTS_KEY,\n      value: JSON.stringify(updatedReports)\n    });\n  } catch (error) {\n    console.error('Error updating sync attempt:', error);\n  }\n};\n\n/**\n * Attempts to synchronize all pending reports with the server\n * @returns Object containing stats about the sync operation\n */\nexport const syncPendingReports = async (): Promise<{ \n  success: number, \n  failed: number, \n  remaining: number \n}> => {\n  // Check if we're online first\n  const online = await isOnline();\n  if (!online) {\n    logger.info('Device is offline, skipping sync attempt');\n    return { success: 0, failed: 0, remaining: 0 };\n  }\n  \n  try {\n    const pendingReports = await getPendingReports();\n    if (pendingReports.length === 0) {\n      return { success: 0, failed: 0, remaining: 0 };\n    }\n    \n    logger.info(`Attempting to sync ${pendingReports.length} pending reports`);\n    \n    let successCount = 0;\n    let failedCount = 0;\n    \n    // Process each pending report\n    for (const report of pendingReports) {\n      try {\n        // Update sync attempt metadata\n        await updateSyncAttempt(report.id);\n        \n        // Ensure the user exists in the public.users table first\n        // This prevents foreign key constraint errors\n        const userId = report.reportData.user_id;\n        if (!userId) {\n          logger.error(`Report ${report.id} has no user_id, skipping sync`);\n          failedCount++;\n          continue;\n        }\n        \n        const userIdFromDb = await ensureUserExists(userId);\n        if (!userIdFromDb) {\n          logger.error(`Failed to ensure user ${userId} exists, skipping sync for report ${report.id}`);\n          failedCount++;\n          continue;\n        }\n        \n        // Attempt to submit to Supabase\n        report.reportData.user_id = userIdFromDb;\n        const { error } = await supabase\n          .from('activity_reports')\n          .insert([report.reportData]);\n        \n        if (error) {\n          logger.error(`Error syncing report ${report.id}:`, error);\n          failedCount++;\n        } else {\n          // Successfully synced, remove from pending list\n          await removePendingReport(report.id);\n          successCount++;\n          logger.info(`Successfully synced report ${report.id}`);\n        }\n      } catch (error) {\n        console.error(`Error processing report ${report.id}:`, error);\n        failedCount++;\n      }\n    }\n    \n    // Get updated count of remaining reports\n    const remainingReports = await getPendingReports();\n    \n    console.log(`Sync complete. Success: ${successCount}, Failed: ${failedCount}, Remaining: ${remainingReports.length}`);\n    \n    return {\n      success: successCount,\n      failed: failedCount,\n      remaining: remainingReports.length\n    };\n  } catch (error) {\n    console.error('Error syncing pending reports:', error);\n    return { success: 0, failed: 0, remaining: 0 };\n  }\n};\n\n/**\n * Submit an activity report, with offline fallback\n * @param reportData The activity report to submit\n * @returns Object with status of the submission\n */\nexport const submitActivityReport = async (reportData: Partial<ActivityReport>): Promise<{ \n  success: boolean;\n  offline: boolean;\n  message: string;\n  error?: any;\n}> => {\n  try {\n    const online = await isOnline();\n    \n    // If offline, save locally\n    if (!online) {\n      await saveReportForLaterSync(reportData);\n      return {\n        success: true,\n        offline: true,\n        message: 'Report saved locally and will be submitted when online'\n      };\n    }\n    \n    // We're online, try immediate submission\n    if (!reportData.user_id) {\n      throw new Error('User ID is required for activity report');\n    }\n    logger.debug(`Attempting to ensure user exists for auth_id: ${reportData.user_id}`);\n    \n    const userIdFromDb = await ensureUserExists(reportData.user_id);\n    if (!userIdFromDb) {\n      throw new Error(`Failed to ensure user ${reportData.user_id} exists in database`);\n    }\n    \n    reportData.user_id = userIdFromDb;\n    const { error } = await supabase\n      .from('activity_reports')\n      .insert([reportData]);\n    \n    if (error) {\n      // Even though we're online, the submission failed\n      // Save it for later and return the error\n      await saveReportForLaterSync(reportData);\n      return {\n        success: false,\n        offline: false,\n        message: `Failed to submit report: ${error.message}`,\n        error\n      };\n    }\n    \n    // Successfully submitted\n    return {\n      success: true,\n      offline: false,\n      message: 'Report submitted successfully'\n    };\n  } catch (error: any) {\n    // Error during the submission process\n    // Save locally as fallback\n    await saveReportForLaterSync(reportData);\n    return {\n      success: false,\n      offline: false,\n      message: `Error during submission: ${error.message || 'Unknown error'}`,\n      error\n    };\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { ActivityReportStepper } from \"@/components/ActivityReportStepper\";\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from \"sonner\";\nimport { useAuth } from '@/contexts/NewAuthContext';\nimport { ActivityReport } from '@/types/activity-report';\nimport { Card } from \"@/components/ui/card\";\nimport { AlertCircle, CloudOff, Wifi } from \"lucide-react\";\nimport { submitActivityReport, syncPendingReports } from '@/utils/offlineStorage';\nimport { isOnline, initNetworkMonitoring } from '@/utils/networkUtils';\nimport { logger } from '@/utils/loggerService';\n\n\nconst ReportActivityPage = () => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [networkStatus, setNetworkStatus] = useState<boolean | null>(null);\n  const [pendingReports, setPendingReports] = useState<number>(0);\n  const { user, loading: isAuthLoading } = useAuth();\n  const navigate = useNavigate();\n\n  // Check authentication status\n  useEffect(() => {\n    if (!isAuthLoading && !user) {\n      navigate('/login');\n    }\n  }, [user, isAuthLoading, navigate]);\n\n  // Initialize network monitoring\n  useEffect(() => {\n    const initialize = async () => {\n      // Init network monitoring\n      const status = await initNetworkMonitoring();\n      setNetworkStatus(status.connected);\n\n      // Check for pending reports to sync\n      syncPendingReports().then(result => {\n        setPendingReports(result.remaining);\n        if (result.success > 0) {\n          toast.success(`Successfully synced ${result.success} pending reports`);\n        }\n      });\n    };\n    \n    initialize();\n\n    // Set up interval to check for network changes and sync reports\n    const intervalId = setInterval(async () => {\n      const online = await isOnline();\n      setNetworkStatus(online);\n      \n      if (online) {\n        const result = await syncPendingReports();\n        setPendingReports(result.remaining);\n      }\n    }, 30000); // Check every 30 seconds\n    \n    return () => clearInterval(intervalId);\n  }, []);\n\n  if (isAuthLoading) {\n    return <div className=\"flex items-center justify-center h-screen\">Loading...</div>;\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const handleSubmit = async (reportData: Partial<ActivityReport>) => {\n    setIsSubmitting(true);\n    try {\n      // Log submission attempt\n      logger.info('Submitting activity report', {\n        type: reportData.observation_type,\n        location: `${reportData.latitude},${reportData.longitude}`\n      });\n      \n      // Use offline-aware submission\n      const result = await submitActivityReport(reportData);\n      \n      if (result.success) {\n        if (result.offline) {\n          toast.success('Report saved locally and will be submitted when online');\n          setPendingReports(prev => prev + 1);\n        } else {\n          toast.success('Activity report submitted successfully');\n        }\n        navigate('/activities');\n      } else {\n        logger.error('Error submitting report', result.error);\n        toast.error(result.message);\n      }\n    } catch (err) {\n      logger.error('Unexpected error submitting report:', err);\n      toast.error(`Failed to submit report: ${err instanceof Error ? err.message : 'Unknown error'}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto p-2 sm:p-4\">\n        <header className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl\">\n            Wild Elephant Monitoring System\n          </h1>\n          <h2 className=\"mt-2 text-2xl font-semibold text-gray-600\">\n            जंगली हाथी निगरानी प्रणाली (2025)\n          </h2>\n          \n          {/* Network Status Indicator */}\n          <div className=\"mt-2 flex items-center\">\n            {networkStatus === null ? (\n              <span className=\"inline-flex items-center text-gray-500\">\n                <AlertCircle className=\"h-4 w-4 mr-1\" />\n                <span className=\"text-sm\">Checking network status...</span>\n              </span>\n            ) : networkStatus ? (\n              <span className=\"inline-flex items-center text-green-600\">\n                <Wifi className=\"h-4 w-4 mr-1\" />\n                <span className=\"text-sm\">Online Mode</span>\n              </span>\n            ) : (\n              <span className=\"inline-flex items-center text-amber-600\">\n                <CloudOff className=\"h-4 w-4 mr-1\" />\n                <span className=\"text-sm\">Offline Mode</span>\n                {pendingReports > 0 && (\n                  <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-amber-100 text-amber-800\">\n                    {pendingReports} pending\n                  </span>\n                )}\n              </span>\n            )}\n          </div>\n        </header>\n\n\n\n        <Card className=\"mb-8 overflow-hidden border border-blue-100 bg-white shadow-sm\">\n          <div className=\"p-6\">\n            <div className=\"flex items-start gap-3\">\n              <AlertCircle className=\"h-6 w-6 text-blue-600 flex-shrink-0 mt-1\" />\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">निर्देश / Instructions:</h3>\n                <ul className=\"space-y-3 text-gray-600\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-blue-600\">•</span>\n                    <span>\n                      इस फॉर्म को चार चरणों में पूरा करें: तारीख/समय और स्थान, अवलोकन का प्रकार, कम्पास बेयरिंग, और फोटो।\n                      <br />\n                      <span className=\"text-gray-500\">Complete this form in four steps: Date/Time & Location, Type of Observation, Compass Bearing, and Photo.</span>\n                    </span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-blue-600\">•</span>\n                    <span>\n                      प्रत्येक चरण में आवश्यक जानकारी भरें और 'Next' बटन पर क्लिक करें। पिछले चरण पर जाने के लिए 'Previous' बटन का उपयोग करें।\n                      <br />\n                      <span className=\"text-gray-500\">Fill in the required information in each step and click 'Next'. Use 'Previous' to go back to earlier steps.</span>\n                    </span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-blue-600\">•</span>\n                    <span>\n                      GPS लोकेशन को Degree Decimal फॉर्मेट में भरें (उदाहरण: 23.4536 81.4763)। सटीक स्थान महत्वपूर्ण है।\n                      <br />\n                      <span className=\"text-gray-500\">Enter GPS location in Degree Decimal format (Example: 23.4536 81.4763). Accurate location is crucial.</span>\n                    </span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-blue-600\">•</span>\n                    <span>\n                      अवलोकन के प्रकार के अनुसार, हाथियों की संख्या या अप्रत्यक्ष साक्ष्य का विवरण दें।\n                      <br />\n                      <span className=\"text-gray-500\">Based on observation type, provide elephant count or indirect evidence details.</span>\n                    </span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <main className=\"max-w-4xl mx-auto\">\n          <ActivityReportStepper onSubmit={handleSubmit} isSubmitting={isSubmitting} />\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default ReportActivityPage;"],"names":["Progress","React.forwardRef","className","value","props","ref","jsx","ProgressPrimitive.Root","cn","ProgressPrimitive.Indicator","initialFormData","ActivityFormContext","createContext","ActivityFormProvider","children","currentStep","setCurrentStep","useState","formData","setFormData","isPhotoUploading","setIsPhotoUploading","steps","goToNextStep","currentIndex","goToPreviousStep","updateFormData","data","prev","isStepValid","step","isLastStep","resetForm","useActivityForm","context","useContext","useGeolocation","state","setState","useEffect","successHandler","position","errorHandler","error","DateTimeLocationStep","latitude","longitude","geoError","handleFetchCurrentData","now","jsxs","Button","RefreshCw","Label","Clock","Input","e","MapPin","RadioGroup","RadioGroupPrimitive.Root","RadioGroupItem","RadioGroupPrimitive.Item","RadioGroupPrimitive.Indicator","Circle","observationTypes","indirectSightingTypes","lossTypes","ObservationTypeStep","handleObservationTypeChange","debouncedSetFormData","useMemo","debounce","updates","handleNumberChange","useCallback","field","num","handleSelectChange","Card","CardContent","type","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","LOGS_STORAGE_KEY","MAX_LOGS","LoggerService","Capacitor","Device","userId","level","message","details","entry","Preferences","logs","logger","compassListeners","compassInitialized","hasPermission","isAbsolute","isWebKit","isCompassAvailable","requestCompassPermission","iosPermissionAPI","calibrateReading","reading","handleOrientation","event","calibratedReading","listener","initCompass","Motion","motionReading","motionError","cleanupCompass","subscribeToCompass","callback","unsubscribeFromCompass","index","calculateBearing","start","end","startLat","startLng","endLat","endLng","y","x","bearing","getCurrentPosition","options","Geolocation","getBearingToPosition","target","accuracy","CompassBearingStep","isTracking","setIsTracking","isLocked","setIsLocked","isPointingMode","setIsPointingMode","compassState","setCompassState","lastHeading","useRef","watchId","compassService.isCompassAvailable","toast","compassService.requestCompassPermission","compassService.initCompass","compassService.getCurrentPosition","compassService.cleanupCompass","handleCompassBearingChange","calculateBearingToTarget","targetLat","targetLng","targetPosition","result","compassService.getBearingToPosition","roundedBearing","_a","handleCompassReading","heading","compassIndex","compassService.subscribeToCompass","compassService.unsubscribeFromCompass","toggleTracking","toggleLock","getTargetLocation","setTarget","getAccuracyColor","getAccuracyLabel","Fragment","XCircle","LockOpen","LockClosed","Compass","Navigation","ArrowRight","PhotoStep","isUploading","setIsUploadingLocal","fileInputRef","handleFileChange","file","fileExt","filePath","uploadPromise","supabase","timeoutPromise","_","reject","id","publicUrl","handleCameraClick","Camera","Upload","FileText","formatDate","date","StepperContent","onSubmit","externalIsSubmitting","isSubmitting","setIsSubmitting","navigate","useNavigate","user","useAuth","currentStepIndex","isActuallySubmitting","handleSubmit","session","formattedDate","formattedTime","reportData","CurrentStepComponent","CardHeader","CardTitle","isDisabled","ActivityReportStepper","networkStatus","initNetworkMonitoring","status","Network","isOnline","ensureUserExists","existingUser","fetchError","PENDING_REPORTS_KEY","saveReportForLaterSync","pendingReport","uuidv4","existingReportsJSON","updatedReports","getPendingReports","reportsJSON","removePendingReport","reportId","report","updateSyncAttempt","syncPendingReports","pendingReports","successCount","failedCount","userIdFromDb","remainingReports","submitActivityReport","ReportActivityPage","setNetworkStatus","setPendingReports","isAuthLoading","intervalId","online","err","AlertCircle","Wifi","CloudOff"],"mappings":"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"}
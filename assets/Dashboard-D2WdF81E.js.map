{"version":3,"file":"Dashboard-D2WdF81E.js","sources":["../../src/components/ui/tabs.tsx","../../src/components/EnhancedDashboard.tsx","../../src/pages/Dashboard.tsx"],"sourcesContent":["import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { supabase } from '@/lib/supabaseClient';\nimport { BeatMap } from './BeatMap';\nimport { RefreshCw, AlertCircle, Users, Calendar, MapPin, Activity, Eye, AlertTriangle, FileText } from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\nimport { MapContainer, TileLayer, Marker, Popup, Polygon, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\ninterface DashboardFilters {\n  division?: string;\n  range?: string;\n  beat?: string;\n  startDate?: string;\n  endDate?: string;\n  timeRange?: string;\n}\n\ninterface FilterOption {\n  id: string;\n  name: string;\n}\n\ninterface HeatmapPoint {\n  lat: number;\n  lng: number;\n  type: 'sighting' | 'incident';\n  title: string;\n  description: string;\n  date: string;\n}\n\ninterface GeoPolygon {\n  id: string;\n  name: string;\n  coordinates: [number, number][];\n  type: 'division' | 'range' | 'beat';\n}\n\ninterface DivisionPolygonData {\n  id: string;\n  name: string;\n  geojson: string;\n  new_division_id?: string;\n}\n\ninterface PolygonResponse {\n  id: string;\n  name: string;\n  geojson: string;\n}\n\ninterface DivisionPolygon {\n  id: string;\n  new_division_id: string;\n  divisions: {\n    name: string;\n  };\n}\n\ninterface RangePolygon {\n  id: string;\n  new_range_id: string;\n  ranges: {\n    name: string;\n  };\n}\n\ninterface BeatPolygon {\n  id: string;\n  new_beat_id: string;\n  beats: {\n    name: string;\n  };\n}\n\ninterface ActivityMarker {\n  id: string;\n  latitude: number;\n  longitude: number;\n  observation_type: string;\n  activity_date: string;\n  activity_time: string;\n  total_elephants?: number;\n  male_elephants?: number;\n  female_elephants?: number;\n  unknown_elephants?: number;\n  calves?: number;\n  indirect_sighting_type?: string;\n  loss_type?: string;\n  compass_bearing?: number;\n  photo_url?: string;\n}\n\ninterface KPISummary {\n  total_activities: number;\n  total_users: number;\n  total_days: number;\n  total_elephants_sighted: number;\n  total_loss_reports: number;\n  loss_types: { type: string; count: number }[];\n  today_activities: number;\n}\n\ninterface DivisionStat {\n  division_id: string;\n  division_name: string;\n  total_observations: number;\n  direct_sightings: number;\n  indirect_sightings: number;\n  loss_reports: number;\n  total_elephants: number;\n  male_elephants: number;\n  female_elephants: number;\n  calves: number;\n}\n\ninterface RangeStat {\n  range_id: string;\n  range_name: string;\n  division_id: string;\n  division_name: string;\n  total_observations: number;\n  direct_sightings: number;\n  indirect_sightings: number;\n  loss_reports: number;\n  total_elephants: number;\n  male_elephants: number;\n  female_elephants: number;\n  calves: number;\n}\n\ninterface BeatStat {\n  beat_id: string;\n  beat_name: string;\n  range_id: string;\n  range_name: string;\n  division_id: string;\n  division_name: string;\n  total_observations: number;\n  direct_sightings: number;\n  indirect_sightings: number;\n  loss_reports: number;\n  total_elephants: number;\n  male_elephants: number;\n  female_elephants: number;\n  calves: number;\n}\n\ninterface DashboardData {\n  kpiSummary: KPISummary;\n  divisionStats: DivisionStat[];\n  rangeStats: RangeStat[];\n  beatStats: BeatStat[];\n  observationTypes: { observation_type: string; count: number }[];\n  heatmap: any[];\n}\n\ninterface SupabaseResponse<T> {\n  data: T[] | null;\n  error: any;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\n\n// Component to handle map bounds\nfunction MapBounds({ polygons }: { polygons: GeoPolygon[] }) {\n  const map = useMap();\n\n  useEffect(() => {\n    if (polygons.length > 0) {\n      const bounds = L.latLngBounds(\n        polygons.flatMap(polygon => polygon.coordinates)\n      );\n      map.fitBounds(bounds, { padding: [50, 50] });\n    }\n  }, [polygons, map]);\n\n  return null;\n}\n\nexport const EnhancedDashboard: React.FC = () => {\n  const [filters, setFilters] = useState<DashboardFilters>({\n    timeRange: '7d'\n  });\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [divisions, setDivisions] = useState<FilterOption[]>([]);\n  const [ranges, setRanges] = useState<FilterOption[]>([]);\n  const [beats, setBeats] = useState<FilterOption[]>([]);\n  const [data, setData] = useState<DashboardData>({\n    kpiSummary: {\n      total_activities: 0,\n      total_users: 0,\n      total_days: 0,\n      total_elephants_sighted: 0,\n      total_loss_reports: 0,\n      loss_types: [],\n      today_activities: 0\n    },\n    divisionStats: [],\n    rangeStats: [],\n    beatStats: [],\n    observationTypes: [],\n    heatmap: []\n  });\n  const [error, setError] = useState<string | null>(null);\n  const [hasData, setHasData] = useState(false);\n  const [selectedPolygons, setSelectedPolygons] = useState<GeoPolygon[]>([]);\n  const [activityMarkers, setActivityMarkers] = useState<ActivityMarker[]>([]);\n\n  // Fetch all divisions and their polygons\n  useEffect(() => {\n    async function fetchDivisions() {\n      setLoading(true);\n      try {\n        // Fetch divisions\n        const { data: divisionsData, error: divError } = await supabase\n          .from('divisions')\n          .select('id, name')\n          .order('name');\n        \n        if (divError) throw divError;\n        \n        // Map to FilterOption type\n        const mappedDivisions: FilterOption[] = (divisionsData || []).map(div => ({\n          id: String(div.id),\n          name: String(div.name)\n        }));\n        \n        setDivisions(mappedDivisions);\n        \n        // Fetch division polygons\n        const { data: polygonsData, error: polyError } = await supabase\n          .from('division_polygons')\n          .select('*');\n          \n        if (polyError) throw polyError;\n        \n        // Convert polygons to GeoJSON format for the map\n        const divisionPolygons = ((polygonsData as unknown) as DivisionPolygonData[] || []).reduce<GeoPolygon[]>((acc, poly) => {\n          try {\n            const geojson = JSON.parse(poly.geojson);\n            const coords = geojson.coordinates[0].map((coord: [number, number]) => [coord[1], coord[0]]);\n            acc.push({\n              id: poly.id,\n              name: poly.name || 'Unnamed Division',\n              type: 'division',\n              coordinates: coords\n            });\n          } catch (e) {\n            console.error('Error parsing polygon data:', e);\n          }\n          return acc;\n        }, []);\n        \n        setSelectedPolygons(divisionPolygons);\n        \n      } catch (error) {\n        console.error('Error in fetchDivisions:', error);\n        setError('Failed to load divisions data');\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchDivisions();\n  }, []);\n\n  // Fetch ranges for selected division\n  useEffect(() => {\n    async function fetchRanges() {\n      if (!filters.division) {\n        setRanges([]);\n        setBeats([]);\n        setSelectedPolygons([]);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        // Fetch ranges for the selected division\n        const { data: rangesData, error: rangesError } = await supabase\n          .from('ranges')\n          .select('new_id, name, new_division_id')\n          .eq('new_division_id', filters.division)\n          .order('name');\n        \n        if (rangesError) throw rangesError;\n        \n        // Map to FilterOption type\n        const mappedRanges: FilterOption[] = (rangesData || []).map(range => ({\n          id: String(range.new_id),\n          name: String(range.name)\n        }));\n        \n        setRanges(mappedRanges);\n        setBeats([]);\n        \n        // Fetch and update the selected polygon for the division\n        const { data: polygonData, error: polyError } = await supabase\n          .from('division_polygons')\n          .select('*')\n          .eq('new_division_id', filters.division)\n          .single();\n          \n        if (!polyError && polygonData) {\n          try {\n            const polygon = polygonData as unknown as DivisionPolygonData;\n            const geojson = JSON.parse(polygon.geojson);\n            const coords = geojson.coordinates[0].map((coord: [number, number]) => [coord[1], coord[0]]);\n            setSelectedPolygons([{\n              id: polygon.id,\n              name: polygon.name || 'Unnamed Division',\n              type: 'division',\n              coordinates: coords\n            }]);\n          } catch (e) {\n            console.error('Error parsing polygon data:', e);\n            setSelectedPolygons([]);\n          }\n        } else {\n          setSelectedPolygons([]);\n        }\n        \n      } catch (error) {\n        console.error('Error in fetchRanges:', error);\n        setError('Failed to load ranges data');\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchRanges();\n  }, [filters.division]);\n\n  // Fetch beats for selected range\n  useEffect(() => {\n    async function fetchBeats() {\n      if (!filters.range || !filters.division) {\n        setBeats([]);\n        return;\n      }\n\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('beats')\n        .select(`\n          new_id,\n          name,\n          new_range_id,\n          new_division_id\n        `)\n        .eq('new_range_id', filters.range)\n        .eq('new_division_id', filters.division)\n        .order('name');\n      \n      if (error) {\n        console.error('Error fetching beats:', error);\n        return;\n      }\n      // Map to FilterOption\n      const mappedBeats = (data || []).map((beat: any) => ({ id: beat.new_id, name: beat.name }));\n      setBeats(mappedBeats);\n      setLoading(false);\n    }\n    \n    fetchBeats();\n  }, [filters.range, filters.division]);\n\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      // Fetch KPI summary\n      const { data: kpiSummary, error: kpiError } = await supabase\n        .from('v_dashboard_kpi_summary')\n        .select('*')\n        .single();\n\n      if (kpiError) throw kpiError;\n\n      // Fetch division stats\n      const { data: divisionStats, error: divisionError } = await supabase\n        .from('v_dashboard_division_stats')\n        .select('*');\n\n      if (divisionError) throw divisionError;\n\n      // Fetch range stats\n      const { data: rangeStats, error: rangeError } = await supabase\n        .from('v_dashboard_range_stats')\n        .select('*');\n\n      if (rangeError) throw rangeError;\n\n      // Fetch beat stats\n      const { data: beatStats, error: beatError } = await supabase\n        .from('v_dashboard_beat_stats')\n        .select('*');\n\n      if (beatError) throw beatError;\n\n      // Fetch observations by type\n      const { data: observationTypes, error: observationTypesError } = await supabase\n        .from('v_dashboard_observations_by_type')\n        .select('*');\n\n      if (observationTypesError) throw observationTypesError;\n\n      // Fetch loss data\n      const { data: lossData, error: lossError } = await supabase\n        .from('v_elephant_activity_observations_by_type')\n        .select('*');\n\n      if (lossError) throw lossError;\n\n      const total_loss_reports = lossData?.reduce((sum, item) => sum + (Number(item.count) || 0), 0) || 0;\n\n      const updatedKpiSummary: KPISummary = {\n        total_activities: Number(kpiSummary.total_activities) || 0,\n        total_users: Number(kpiSummary.total_users) || 0,\n        total_days: Number(kpiSummary.total_days) || 0,\n        total_elephants_sighted: Number(kpiSummary.total_elephants_sighted) || 0,\n        total_loss_reports,\n        loss_types: lossData?.map(item => ({\n          type: String(item.type),\n          count: Number(item.count) || 0\n        })) || [],\n        today_activities: Number(kpiSummary.today_activities) || 0\n      };\n\n      const newData: DashboardData = {\n        kpiSummary: updatedKpiSummary,\n        divisionStats: divisionStats?.map(stat => ({\n          division_id: String(stat.division_id),\n          division_name: String(stat.division_name),\n          total_observations: Number(stat.total_observations) || 0,\n          direct_sightings: Number(stat.direct_sightings) || 0,\n          indirect_sightings: Number(stat.indirect_sightings) || 0,\n          loss_reports: Number(stat.loss_reports) || 0,\n          total_elephants: Number(stat.total_elephants) || 0,\n          male_elephants: Number(stat.male_elephants) || 0,\n          female_elephants: Number(stat.female_elephants) || 0,\n          calves: Number(stat.calves) || 0\n        })) || [],\n        rangeStats: rangeStats?.map(stat => ({\n          range_id: String(stat.range_id),\n          range_name: String(stat.range_name),\n          division_id: String(stat.division_id),\n          division_name: String(stat.division_name),\n          total_observations: Number(stat.total_observations) || 0,\n          direct_sightings: Number(stat.direct_sightings) || 0,\n          indirect_sightings: Number(stat.indirect_sightings) || 0,\n          loss_reports: Number(stat.loss_reports) || 0,\n          total_elephants: Number(stat.total_elephants) || 0,\n          male_elephants: Number(stat.male_elephants) || 0,\n          female_elephants: Number(stat.female_elephants) || 0,\n          calves: Number(stat.calves) || 0\n        })) || [],\n        beatStats: beatStats?.map(stat => ({\n          beat_id: String(stat.beat_id),\n          beat_name: String(stat.beat_name),\n          range_id: String(stat.range_id),\n          range_name: String(stat.range_name),\n          division_id: String(stat.division_id),\n          division_name: String(stat.division_name),\n          total_observations: Number(stat.total_observations) || 0,\n          direct_sightings: Number(stat.direct_sightings) || 0,\n          indirect_sightings: Number(stat.indirect_sightings) || 0,\n          loss_reports: Number(stat.loss_reports) || 0,\n          total_elephants: Number(stat.total_elephants) || 0,\n          male_elephants: Number(stat.male_elephants) || 0,\n          female_elephants: Number(stat.female_elephants) || 0,\n          calves: Number(stat.calves) || 0\n        })) || [],\n        observationTypes: observationTypes?.map(type => ({\n          observation_type: String(type.observation_type),\n          count: Number(type.count) || 0\n        })) || [],\n        heatmap: []\n      };\n      \n      setData(newData);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching dashboard data:', err);\n      setError('Failed to load dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Add error boundary to prevent crashes\n    const loadData = async () => {\n      try {\n        await fetchData();\n      } catch (error) {\n        console.error('Failed to load dashboard data:', error);\n        setError('Failed to load dashboard data. Some features may not be available.');\n        setLoading(false);\n      }\n    };\n    \n    loadData();\n  }, []);\n\n  const handleFilterChange = (key: keyof DashboardFilters, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    try {\n      await fetchData();\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  // Fetch polygon data when filters change\n  useEffect(() => {\n    async function fetchPolygons() {\n      if (!filters.division) {\n        setSelectedPolygons([]);\n        return;\n      }\n\n      try {\n        let polygons: GeoPolygon[] = [];\n\n        // Fetch division polygon\n        const { data: divisionData, error: divisionError } = await supabase\n          .from('division_polygons')\n          .select(`\n            id,\n            new_division_id,\n            divisions!inner(\n              name\n            )\n          `)\n          .eq('new_division_id', filters.division)\n          .single() as { data: DivisionPolygon | null, error: any };\n\n        console.log('Division data:', divisionData);\n        console.log('Division error:', divisionError);\n\n        if (divisionData) {\n          try {\n            // Get the polygon data using a raw query\n            const { data: polygonData, error: polygonError } = await supabase\n              .from('division_polygons')\n              .select('polygon')\n              .eq('id', divisionData.id)\n              .single();\n\n            if (polygonError) {\n              console.error('Error fetching polygon:', polygonError);\n              return;\n            }\n\n            // Convert the polygon to GeoJSON\n            const { data: geoJsonData, error: geoJsonError } = await supabase\n              .rpc('st_asgeojson', { geom: polygonData.polygon });\n\n            if (geoJsonError) {\n              console.error('Error converting to GeoJSON:', geoJsonError);\n              return;\n            }\n\n            const geoJson = typeof geoJsonData === 'string' ? JSON.parse(geoJsonData) : geoJsonData && typeof geoJsonData === 'object' ? geoJsonData : null;\n            console.log('Parsed division GeoJSON:', geoJson);\n            polygons.push({\n              id: divisionData.id,\n              name: typeof divisionData.divisions.name === 'string' ? divisionData.divisions.name : divisionData.divisions.name != null ? String(divisionData.divisions.name) : '',\n              coordinates: geoJson && geoJson.coordinates ? geoJson.coordinates[0].map(([lng, lat]: [number, number]) => [lat, lng]) : [],\n              type: 'division'\n            });\n          } catch (error) {\n            console.error('Error processing division polygon:', error);\n          }\n        }\n\n        // Fetch range polygon if selected\n        if (filters.range) {\n          const { data: rangeData, error: rangeError } = await supabase\n            .from('range_polygons')\n            .select(`\n              id,\n              new_range_id,\n              ranges!inner(\n                name\n              )\n            `)\n            .eq('new_range_id', filters.range)\n            .single() as { data: RangePolygon | null, error: any };\n\n          console.log('Range data:', rangeData);\n          console.log('Range error:', rangeError);\n\n          if (rangeData) {\n            try {\n              // Get the polygon data using a raw query\n              const { data: polygonData, error: polygonError } = await supabase\n                .from('range_polygons')\n                .select('polygon')\n                .eq('id', rangeData.id)\n                .single();\n\n              if (polygonError) {\n                console.error('Error fetching polygon:', polygonError);\n                return;\n              }\n\n              // Convert the polygon to GeoJSON\n              const { data: geoJsonData, error: geoJsonError } = await supabase\n                .rpc('st_asgeojson', { geom: polygonData.polygon });\n\n              if (geoJsonError) {\n                console.error('Error converting to GeoJSON:', geoJsonError);\n                return;\n              }\n\n              const geoJson = typeof geoJsonData === 'string' ? JSON.parse(geoJsonData) : geoJsonData && typeof geoJsonData === 'object' ? geoJsonData : null;\n              console.log('Parsed range GeoJSON:', geoJson);\n              polygons.push({\n                id: rangeData.id,\n                name: typeof rangeData.ranges.name === 'string' ? rangeData.ranges.name : rangeData.ranges.name != null ? String(rangeData.ranges.name) : '',\n                coordinates: geoJson && geoJson.coordinates ? geoJson.coordinates[0].map(([lng, lat]: [number, number]) => [lat, lng]) : [],\n                type: 'range'\n              });\n            } catch (error) {\n              console.error('Error processing range polygon:', error);\n            }\n          }\n        }\n\n        // Fetch beat polygon if selected\n        if (filters.beat) {\n          const { data: beatData, error: beatError } = await supabase\n            .from('beat_polygons')\n            .select(`\n              id,\n              new_beat_id,\n              beats!inner(\n                name\n              )\n            `)\n            .eq('new_beat_id', filters.beat)\n            .single() as { data: BeatPolygon | null, error: any };\n\n          console.log('Beat data:', beatData);\n          console.log('Beat error:', beatError);\n\n          if (beatData) {\n            try {\n              // Get the polygon data using a raw query\n              const { data: polygonData, error: polygonError } = await supabase\n                .from('beat_polygons')\n                .select('polygon')\n                .eq('id', beatData.id)\n                .single();\n\n              if (polygonError) {\n                console.error('Error fetching polygon:', polygonError);\n                return;\n              }\n\n              // Convert the polygon to GeoJSON\n              const { data: geoJsonData, error: geoJsonError } = await supabase\n                .rpc('st_asgeojson', { geom: polygonData.polygon });\n\n              if (geoJsonError) {\n                console.error('Error converting to GeoJSON:', geoJsonError);\n                return;\n              }\n\n              const geoJson = typeof geoJsonData === 'string' ? JSON.parse(geoJsonData) : geoJsonData && typeof geoJsonData === 'object' ? geoJsonData : null;\n              console.log('Parsed beat GeoJSON:', geoJson);\n              polygons.push({\n                id: beatData.id,\n                name: typeof beatData.beats.name === 'string' ? beatData.beats.name : beatData.beats.name != null ? String(beatData.beats.name) : '',\n                coordinates: geoJson && geoJson.coordinates ? geoJson.coordinates[0].map(([lng, lat]: [number, number]) => [lat, lng]) : [],\n                type: 'beat'\n              });\n            } catch (error) {\n              console.error('Error processing beat polygon:', error);\n            }\n          }\n        }\n\n        console.log('Final polygons array:', polygons);\n        setSelectedPolygons(polygons);\n      } catch (error) {\n        console.error('Error fetching polygon data:', error);\n      }\n    }\n\n    fetchPolygons();\n  }, [filters.division, filters.range, filters.beat]);\n\n  // Fetch activity markers from activity_observation\n  useEffect(() => {\n    async function fetchActivityMarkers() {\n      try {\n        // Note: activity_reports table doesn't have a beat_id column\n        // Using activity_observation view which maps to the correct columns\n        const { data: markersData, error: markersError } = await supabase\n          .from('activity_observation')\n          .select('id,latitude,longitude,observation_type,activity_date,activity_time,total_elephants,male_elephants,female_elephants,unknown_elephants,calves,indirect_sighting_type,loss_type,compass_bearing,photo_url,created_at,updated_at,division_id,range_id,division_name,range_name,beat_name')\n          .order('created_at', { ascending: false });\n\n        if (markersError) {\n          console.error(\"Error fetching activity markers:\", markersError);\n          throw markersError;\n        }\n\n        // Filter out invalid lat/lng\n        const validMarkers = markersData\n          .filter(marker => \n            marker.latitude && \n            marker.longitude && \n            marker.observation_type\n          )\n          .map(marker => ({\n            id: typeof marker.id === 'string' ? marker.id : marker.id != null ? String(marker.id) : '',\n            latitude: typeof marker.latitude === 'number' ? marker.latitude : marker.latitude != null && !isNaN(Number(marker.latitude)) ? Number(marker.latitude) : 0,\n            longitude: typeof marker.longitude === 'number' ? marker.longitude : marker.longitude != null && !isNaN(Number(marker.longitude)) ? Number(marker.longitude) : 0,\n            observation_type: typeof marker.observation_type === 'string' ? marker.observation_type : marker.observation_type != null ? String(marker.observation_type) : '',\n            activity_date: typeof marker.activity_date === 'string' ? marker.activity_date : marker.activity_date != null ? String(marker.activity_date) : '',\n            activity_time: typeof marker.activity_time === 'string' ? marker.activity_time : marker.activity_time != null ? String(marker.activity_time) : '',\n            total_elephants: typeof marker.total_elephants === 'number' ? marker.total_elephants : marker.total_elephants != null && !isNaN(Number(marker.total_elephants)) ? Number(marker.total_elephants) : 0,\n            male_elephants: typeof marker.male_elephants === 'number' ? marker.male_elephants : marker.male_elephants != null && !isNaN(Number(marker.male_elephants)) ? Number(marker.male_elephants) : 0,\n            female_elephants: typeof marker.female_elephants === 'number' ? marker.female_elephants : marker.female_elephants != null && !isNaN(Number(marker.female_elephants)) ? Number(marker.female_elephants) : 0,\n            unknown_elephants: typeof marker.unknown_elephants === 'number' ? marker.unknown_elephants : marker.unknown_elephants != null && !isNaN(Number(marker.unknown_elephants)) ? Number(marker.unknown_elephants) : 0,\n            calves: typeof marker.calves === 'number' ? marker.calves : marker.calves != null && !isNaN(Number(marker.calves)) ? Number(marker.calves) : 0,\n            indirect_sighting_type: marker.indirect_sighting_type != null ? String(marker.indirect_sighting_type) : undefined,\n            loss_type: marker.loss_type != null ? String(marker.loss_type) : undefined,\n            compass_bearing: marker.compass_bearing != null && !isNaN(Number(marker.compass_bearing)) ? Number(marker.compass_bearing) : undefined,\n            photo_url: marker.photo_url != null ? String(marker.photo_url) : undefined,\n            created_at: typeof marker.created_at === 'string' ? marker.created_at : marker.created_at != null && marker.created_at !== undefined ? String(marker.created_at) : '',\n            updated_at: typeof marker.updated_at === 'string' ? marker.updated_at : marker.updated_at != null && marker.updated_at !== undefined ? String(marker.updated_at) : '',\n            division_id: typeof marker.division_id === 'string' ? marker.division_id : marker.division_id != null && marker.division_id !== undefined ? String(marker.division_id) : '',\n            range_id: typeof marker.range_id === 'string' ? marker.range_id : marker.range_id != null && marker.range_id !== undefined ? String(marker.range_id) : '',\n            // Note: beat_id is not included as it doesn't exist in the activity_reports table\n            division_name: typeof marker.division_name === 'string' ? marker.division_name : marker.division_name != null && marker.division_name !== undefined ? String(marker.division_name) : '',\n            range_name: typeof marker.range_name === 'string' ? marker.range_name : marker.range_name != null && marker.range_name !== undefined ? String(marker.range_name) : '',\n            beat_name: typeof marker.beat_name === 'string' ? marker.beat_name : marker.beat_name != null && marker.beat_name !== undefined ? String(marker.beat_name) : ''\n          }));\n\n        setActivityMarkers(validMarkers);\n      } catch (error) {\n        console.error('Error fetching activity markers:', error);\n        setActivityMarkers([]);\n      }\n    }\n    fetchActivityMarkers();\n  }, []);\n\n  if (loading) {\n  return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Loading dashboard data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"h-8 w-8 text-red-500 mx-auto mb-4\" />\n          <p className=\"text-red-500\">Error: {error}</p>\n          <Button onClick={handleRefresh} className=\"mt-4\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Always render the dashboard UI, even if there is no data\n  return (\n    <div className=\"space-y-8\">\n      {/* Header Section */}\n      <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n        <div className=\"flex items-center gap-4\">\n          <Select\n            value={filters.timeRange}\n            onValueChange={(value) => handleFilterChange('timeRange', value)}\n          >\n            <SelectTrigger className=\"w-[180px] bg-white border-gray-200 shadow-sm hover:border-blue-500 transition-colors\">\n              <SelectValue placeholder=\"Select time range\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"24h\">Last 24 Hours</SelectItem>\n              <SelectItem value=\"7d\">Last 7 Days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 Days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 Days</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button\n            onClick={handleRefresh}\n            className=\"bg-gradient-to-r from-blue-600 to-green-600 text-white hover:from-blue-700 hover:to-green-700 shadow-sm\"\n          >\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* KPI Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"bg-gradient-to-br from-blue-100 to-blue-50 shadow-lg rounded-2xl hover:scale-105 hover:shadow-xl transition-all duration-300 border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-base font-semibold text-blue-700\">Total Activities</CardTitle>\n            <div className=\"bg-blue-200 p-2 rounded-full\">\n              <Activity className=\"h-5 w-5 text-blue-600\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-extrabold text-blue-900\">{data.kpiSummary?.total_activities || 0}</div>\n            <p className=\"text-xs text-blue-600 mt-1\">Across all divisions</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-green-100 to-green-50 shadow-lg rounded-2xl hover:scale-105 hover:shadow-xl transition-all duration-300 border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-base font-semibold text-green-700\">Active Users</CardTitle>\n            <div className=\"bg-green-200 p-2 rounded-full\">\n              <Users className=\"h-5 w-5 text-green-600\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-extrabold text-green-900\">{data.kpiSummary?.total_users || 0}</div>\n            <p className=\"text-xs text-green-600 mt-1\">Total registered users</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-red-100 to-red-50 shadow-lg rounded-2xl hover:scale-105 hover:shadow-xl transition-transform\">\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-base font-semibold text-red-700\">Total Loss</CardTitle>\n            <div className=\"bg-red-200 p-2 rounded-full\">\n              <AlertCircle className=\"h-5 w-5 text-red-600\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-extrabold text-red-900\">{data.kpiSummary?.total_loss_reports || 0}</div>\n            <p className=\"text-xs text-red-600 mt-1\">Total loss reports</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-100 to-purple-50 shadow-lg rounded-2xl hover:scale-105 hover:shadow-xl transition-transform\">\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-base font-semibold text-purple-700\">Today's Activities</CardTitle>\n            <div className=\"bg-purple-200 p-2 rounded-full\">\n              <Calendar className=\"h-5 w-5 text-purple-600\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-extrabold text-purple-900\">{data.kpiSummary?.today_activities || 0}</div>\n            <p className=\"text-xs text-purple-600 mt-1\">Activities in last 24 hours</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Map Section */}\n      <Card className=\"border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n        <CardHeader className=\"bg-gradient-to-r from-blue-50 to-green-50 border-b border-gray-200\">\n          <div className=\"flex flex-col gap-4\">\n            <div>\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">Activity Map</CardTitle>\n              <CardDescription>Geographic distribution of elephant activities</CardDescription>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4 text-blue-600\" />\n                  Division\n                </Label>\n                <Select\n                  value={filters.division || ''}\n                  onValueChange={(value) => {\n                    setFilters(f => ({ ...f, division: value, range: undefined, beat: undefined }));\n                  }}\n                >\n                  <SelectTrigger className=\"w-full bg-white border-gray-200 shadow-sm hover:border-blue-500 transition-colors\">\n                    <SelectValue placeholder=\"Select Division\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {divisions.map((division) => (\n                      <SelectItem key={division.id} value={division.id}>\n                        {division.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4 text-blue-600\" />\n                  Range\n                </Label>\n                <Select\n                  value={filters.range || ''}\n                  onValueChange={(value) => {\n                    setFilters(f => ({ ...f, range: value, beat: undefined }));\n                  }}\n                  disabled={!filters.division}\n                >\n                  <SelectTrigger className=\"w-full bg-white border-gray-200 shadow-sm hover:border-blue-500 transition-colors disabled:opacity-50\">\n                    <SelectValue placeholder=\"Select Range\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {ranges.map((range) => (\n                      <SelectItem key={range.id} value={range.id}>\n                        {range.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4 text-blue-600\" />\n                  Beat\n                </Label>\n                <Select\n                  value={filters.beat || ''}\n                  onValueChange={(value) => {\n                    setFilters(f => ({ ...f, beat: value }));\n                  }}\n                  disabled={!filters.range}\n                >\n                  <SelectTrigger className=\"w-full bg-white border-gray-200 shadow-sm hover:border-blue-500 transition-colors disabled:opacity-50\">\n                    <SelectValue placeholder=\"Select Beat\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {beats.map((beat) => (\n                      <SelectItem key={beat.id} value={beat.id}>\n                        {beat.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"h-[500px] rounded-lg overflow-hidden border border-gray-200\">\n            <MapContainer\n              center={[10.8505, 76.2711]}\n              zoom={8}\n              style={{ width: '100%', height: '100%' }}\n            >\n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n              />\n              <MapBounds polygons={selectedPolygons} />\n              {selectedPolygons.map((polygon) => {\n                console.log('Rendering polygon:', polygon);\n                return (\n                  <Polygon\n                    key={polygon.id}\n                    positions={polygon.coordinates}\n                    pathOptions={{\n                      color: polygon.type === 'division' ? '#2563eb' : \n                             polygon.type === 'range' ? '#f97316' : '#6b7280',\n                      fillColor: polygon.type === 'division' ? '#3b82f6' :\n                                polygon.type === 'range' ? '#fb923c' : '#9ca3af',\n                      fillOpacity: 0.2,\n                      weight: 2\n                    }}\n                  >\n                    <Popup>\n                      <div className=\"p-2\">\n                        <h3 className=\"font-semibold text-gray-900\">{polygon.name}</h3>\n                        <p className=\"text-sm text-gray-600\">\n                          {polygon.type.charAt(0).toUpperCase() + polygon.type.slice(1)} Boundary\n                        </p>\n                      </div>\n                    </Popup>\n                  </Polygon>\n                );\n              })}\n              {data.heatmap.map((point, index) => (\n                <Marker\n                  key={index}\n                  position={[point.lat, point.lng]}\n                  icon={L.divIcon({\n                    className: 'custom-marker',\n                    html: `<div class=\"w-4 h-4 rounded-full bg-blue-500 border-2 border-white shadow-lg\"></div>`,\n                    iconSize: [16, 16],\n                  })}\n                >\n                  <Popup>\n                    <div className=\"p-2\">\n                      <h3 className=\"font-semibold text-gray-900\">{point.division_name}</h3>\n                      <p className=\"text-sm text-gray-600\">\n                        {point.observation_count} observations\n                        {point.total_elephants_seen > 0 && ` • ${point.total_elephants_seen} elephants seen`}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        Last observation: {new Date(point.last_observation_date).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </Popup>\n                </Marker>\n              ))}\n              {activityMarkers.map((activity) => (\n                <Marker\n                  key={activity.id}\n                  position={[activity.latitude, activity.longitude]}\n                  icon={L.divIcon({\n                    className: 'custom-marker',\n                    html: `\n                      <div style=\"\n                        width: 24px;\n                        height: 24px;\n                        background-color: #22c55e;\n                        border: 3px solid white;\n                        border-radius: 50%;\n                        box-shadow: 0 0 10px rgba(0,0,0,0.3);\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                      \">\n                        <div style=\"\n                          width: 8px;\n                          height: 8px;\n                          background-color: white;\n                          border-radius: 50%;\n                        \"></div>\n                      </div>\n                    `,\n                    iconSize: [24, 24],\n                    iconAnchor: [12, 12],\n                    popupAnchor: [0, -12]\n                  })}\n                >\n                  <Popup>\n                    <div className=\"p-2\">\n                      <h3 className=\"font-semibold text-gray-900\">{activity.observation_type}</h3>\n                      <p className=\"text-sm text-gray-600\">\n                        {activity.activity_date} {activity.activity_time}\n                      </p>\n                      {activity.total_elephants && (\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Total Elephants: {activity.total_elephants}\n                          {activity.male_elephants && ` (${activity.male_elephants} male)`}\n                          {activity.female_elephants && ` (${activity.female_elephants} female)`}\n                          {activity.calves && ` (${activity.calves} calves)`}\n                        </p>\n                      )}\n                      {activity.indirect_sighting_type && (\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Evidence: {activity.indirect_sighting_type}\n                        </p>\n                      )}\n                      {activity.loss_type && (\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Loss Type: {activity.loss_type}\n                        </p>\n                      )}\n                    </div>\n                  </Popup>\n                </Marker>\n              ))}\n            </MapContainer>\n          </div>\n          <div className=\"mt-4 flex items-center justify-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-6 h-6 rounded-full bg-green-600 border-2 border-white shadow-md flex items-center justify-center\">\n                <div className=\"w-2 h-2 rounded-full bg-white\"></div>\n              </div>\n              <span className=\"text-sm text-gray-600\">\n                Activity Points ({activityMarkers.length})\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Dashboard Content */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-8\">\n        <TabsList className=\"bg-white p-2 rounded-xl shadow-md flex gap-4\">\n          <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-blue-100 data-[state=active]:text-blue-800 font-semibold px-6 py-2 rounded-lg transition-all duration-300\">Overview</TabsTrigger>\n          <TabsTrigger value=\"activity\" className=\"data-[state=active]:bg-blue-100 data-[state=active]:text-blue-800 font-semibold px-6 py-2 rounded-lg transition-all duration-300\">Activity</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Observations by Type */}\n            <Card className=\"bg-white shadow-lg rounded-2xl border-0\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-bold text-gray-900\">Observations by Type</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-[300px]\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={data.observationTypes} barCategoryGap={24}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200\" />\n                      <XAxis dataKey=\"observation_type\" className=\"text-sm\" />\n                      <YAxis className=\"text-sm\" />\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: 'white',\n                          border: '1px solid #e5e7eb',\n                          borderRadius: '0.75rem',\n                          boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)'\n                        }}\n                      />\n                      <Legend />\n                      <Bar dataKey=\"count\" fill=\"#4f46e5\" radius={[8, 8, 0, 0]} isAnimationActive />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Most Active Areas */}\n            <Card className=\"bg-white shadow-md rounded-2xl\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-bold text-blue-900\">Most Active Areas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-blue-700\">Most Active Division</p>\n                      <p className=\"text-2xl font-extrabold text-blue-900 mt-1\">\n                        {data.divisionStats?.[0]?.division_name || 'N/A'}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-blue-700\">Observations</p>\n                      <p className=\"text-2xl font-extrabold text-blue-900 mt-1\">\n                        {data.divisionStats?.[0]?.total_observations || 0}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-blue-700\">Most Active Range</p>\n                      <p className=\"text-2xl font-extrabold text-blue-900 mt-1\">\n                        {data.rangeStats?.[0]?.range_name || 'N/A'}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-blue-700\">Observations</p>\n                      <p className=\"text-2xl font-extrabold text-blue-900 mt-1\">\n                        {data.rangeStats?.[0]?.total_observations || 0}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Loss Reports Summary */}\n          <Card className=\"bg-white shadow-md rounded-2xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-bold text-red-700\">Loss Reports Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={data.divisionStats} barCategoryGap={24}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200\" />\n                    <XAxis dataKey=\"division_name\" className=\"text-sm\" />\n                    <YAxis className=\"text-sm\" />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'white',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '0.5rem',\n                        boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)'\n                      }}\n                    />\n                    <Legend />\n                    <Bar dataKey=\"loss_reports\" fill=\"#ef4444\" radius={[8, 8, 0, 0]} isAnimationActive />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"activity\" className=\"space-y-8\">\n          {/* Activity by Division */}\n          <Card className=\"bg-white shadow-md rounded-2xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-bold text-blue-900\">Activity by Division</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={data.divisionStats} barCategoryGap={24}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200\" />\n                    <XAxis dataKey=\"division_name\" className=\"text-sm\" />\n                    <YAxis className=\"text-sm\" />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'white',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '0.5rem',\n                        boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)'\n                      }}\n                    />\n                    <Legend />\n                    <Bar dataKey=\"total_observations\" fill=\"#4f46e5\" radius={[8, 8, 0, 0]} isAnimationActive />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Activity by Range (moved from Geography tab) */}\n          <Card className=\"bg-white shadow-md rounded-2xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-bold text-blue-900\">Activity by Range</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={data.rangeStats} barCategoryGap={24}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200\" />\n                    <XAxis dataKey=\"range_name\" className=\"text-sm\" />\n                    <YAxis className=\"text-sm\" />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'white',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '0.5rem',\n                        boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)'\n                      }}\n                    />\n                    <Legend />\n                    <Bar dataKey=\"total_observations\" fill=\"#4f46e5\" radius={[8, 8, 0, 0]} isAnimationActive />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Loss Type Bar Chart */}\n          <Card className=\"bg-white shadow-md rounded-2xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-bold text-red-700\">Loss Reports by Type</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={data.kpiSummary?.loss_types || []} barCategoryGap={24}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200\" />\n                    <XAxis dataKey=\"type\" className=\"text-sm\" />\n                    <YAxis className=\"text-sm\" />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'white',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '0.5rem',\n                        boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)'\n                      }}\n                    />\n                    <Legend />\n                    <Bar dataKey=\"count\" fill=\"#ef4444\" radius={[8, 8, 0, 0]} isAnimationActive />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}; ","import { motion, AnimatePresence } from \"framer-motion\";\nimport { AndroidCard } from \"@/components/ui/android-card\";\nimport { useAndroidTheme } from \"@/theme/AndroidThemeProvider\";\nimport { Activity, AlertTriangle, BarChart2, Calendar, MapPin, Users, Plus, Sun, Moon } from \"lucide-react\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { EnhancedDashboard } from '@/components/EnhancedDashboard';\n\ninterface StatItem {\n  label: string;\n  value: string;\n  icon: React.ReactNode;\n  change: string;\n  changeType: 'positive' | 'negative' | 'neutral';\n}\n\ninterface QuickAction {\n  label: string;\n  icon: React.ReactNode;\n  href: string;\n  bgColor: string;\n  textColor: string;\n}\n\ninterface ActivityItem {\n  id: number;\n  type: string;\n  title: string;\n  description: string;\n  time: string;\n  icon: React.ReactNode;\n}\n\n// Stats data\nconst stats: StatItem[] = [\n  { \n    label: 'Active Elephants', \n    value: '24', \n    icon: <Activity className=\"h-5 w-5 text-emerald-500\" />, \n    change: '+12%', \n    changeType: 'positive' \n  },\n  { \n    label: 'Alerts Today', \n    value: '5', \n    icon: <AlertTriangle className=\"h-5 w-5 text-amber-500\" />, \n    change: '-2', \n    changeType: 'negative' \n  },\n  { \n    label: 'Ranger Patrols', \n    value: '8', \n    icon: <Users className=\"h-5 w-5 text-blue-500\" />, \n    change: '+3', \n    changeType: 'positive' \n  },\n  { \n    label: 'Areas Monitored', \n    value: '15', \n    icon: <MapPin className=\"h-5 w-5 text-violet-500\" />, \n    change: '0', \n    changeType: 'neutral' \n  },\n];\n\n// Quick actions data\nconst quickActions: QuickAction[] = [\n  { \n    label: 'New Sighting', \n    icon: <Plus className=\"h-5 w-5\" />, \n    href: '/report',\n    bgColor: 'bg-emerald-100 dark:bg-emerald-900/30',\n    textColor: 'text-emerald-600 dark:text-emerald-400'\n  },\n  { \n    label: 'View Map', \n    icon: <MapPin className=\"h-5 w-5\" />, \n    href: '/map',\n    bgColor: 'bg-blue-100 dark:bg-blue-900/30',\n    textColor: 'text-blue-600 dark:text-blue-400'\n  },\n  { \n    label: 'Reports', \n    icon: <BarChart2 className=\"h-5 w-5\" />, \n    href: '/reports',\n    bgColor: 'bg-purple-100 dark:bg-purple-900/30',\n    textColor: 'text-purple-600 dark:text-purple-400'\n  },\n  { \n    label: 'Schedule', \n    icon: <Calendar className=\"h-5 w-5\" />, \n    href: '/schedule',\n    bgColor: 'bg-amber-100 dark:bg-amber-900/30',\n    textColor: 'text-amber-600 dark:text-amber-400'\n  },\n];\n\n// Recent activity data\nconst recentActivity: ActivityItem[] = [\n  {\n    id: 1,\n    type: 'sighting',\n    title: 'New elephant sighting',\n    description: 'Herd of 5 elephants spotted near the river',\n    time: '10 minutes ago',\n    icon: <Activity className=\"h-4 w-4 text-emerald-500\" />\n  },\n  {\n    id: 2,\n    type: 'alert',\n    title: 'Security alert',\n    description: 'Unusual movement detected in zone 4B',\n    time: '1 hour ago',\n    icon: <AlertTriangle className=\"h-4 w-4 text-amber-500\" />\n  },\n  {\n    id: 3,\n    type: 'patrol',\n    title: 'Patrol completed',\n    description: 'Ranger team completed morning patrol',\n    time: '2 hours ago',\n    icon: <Users className=\"h-4 w-4 text-blue-500\" />\n  }\n];\n\nexport default function Dashboard() {\n  const { theme, toggleDarkMode } = useAndroidTheme();\n  const isDark = theme.isDark;\n\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n  \n  const handleQuickAction = (action: string) => {\n    console.log('Action:', action);\n    // Handle quick action click\n  };\n  \n  // State to control dashboard view\n  const [showEnhancedDashboard, setShowEnhancedDashboard] = React.useState(true);\n\n  // Helper function to render stats cards\n  const renderStats = () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {stats.map((stat, index) => (\n        <motion.div\n          key={stat.label}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: index * 0.1 }}\n        >\n          <AndroidCard className=\"h-full\">\n            <div className=\"flex items-start justify-between p-6\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-500 dark:text-slate-400\">{stat.label}</p>\n                <p className=\"mt-1 text-2xl font-semibold text-slate-900 dark:text-white\">\n                  {stat.value}\n                </p>\n                <div className={`mt-2 flex items-center text-sm ${\n                  stat.changeType === 'positive' ? 'text-emerald-600 dark:text-emerald-400' :\n                  stat.changeType === 'negative' ? 'text-rose-600 dark:text-rose-400' :\n                  'text-slate-500 dark:text-slate-400'\n                }`}>\n                  {stat.change}\n                  {stat.changeType === 'positive' && (\n                    <svg className=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n                    </svg>\n                  )}\n                  {stat.changeType === 'negative' && (\n                    <svg className=\"ml-1 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                  )}\n                </div>\n              </div>\n              <div className={`p-2 rounded-lg ${stat.changeType === 'positive' ? 'bg-emerald-100 dark:bg-emerald-900/30' :\n                stat.changeType === 'negative' ? 'bg-rose-100 dark:bg-rose-900/30' :\n                'bg-slate-100 dark:bg-slate-800/50'}`}>\n                {stat.icon}\n              </div>\n            </div>\n          </AndroidCard>\n        </motion.div>\n      ))}\n    </div>\n  );\n\n  // Render quick actions\n  const renderQuickActions = () => (\n    <div className=\"mb-8\">\n      <h2 className=\"text-lg font-medium text-slate-900 dark:text-white mb-4\">Quick Actions</h2>\n      <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n        {quickActions.map((action, index) => (\n          <motion.div\n            key={action.label}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 + index * 0.1 }}\n            whileHover={{ y: -2 }}\n          >\n            <Link\n              to={action.href}\n              className={`flex flex-col items-center justify-center p-6 rounded-xl transition-all ${action.bgColor} ${action.textColor} hover:shadow-md`}\n              onClick={() => handleQuickAction(action.label)}\n            >\n              <div className=\"p-3 rounded-full bg-white/20 mb-3\">\n                {action.icon}\n              </div>\n              <span className=\"text-sm font-medium\">{action.label}</span>\n            </Link>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n\n  // Render recent activity\n  const renderRecentActivity = () => (\n    <div>\n      <h2 className=\"text-lg font-medium text-slate-900 dark:text-white mb-4\">Recent Activity</h2>\n      <div className=\"space-y-4\">\n        {recentActivity.map((activity) => (\n          <motion.div\n            key={activity.id}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"flex items-start p-4 rounded-xl bg-white dark:bg-slate-800/50 shadow-sm hover:shadow-md transition-shadow\"\n          >\n            <div className={`p-2 rounded-lg ${\n              activity.type === 'sighting' ? 'bg-emerald-100 dark:bg-emerald-900/30' :\n              activity.type === 'alert' ? 'bg-amber-100 dark:bg-amber-900/30' :\n              'bg-blue-100 dark:bg-blue-900/30'\n            }`}>\n              {activity.icon}\n            </div>\n            <div className=\"ml-4 flex-1\">\n              <h3 className=\"font-medium text-slate-900 dark:text-white\">{activity.title}</h3>\n              <p className=\"text-sm text-slate-500 dark:text-slate-400\">{activity.description}</p>\n              <p className=\"mt-1 text-xs text-slate-400 dark:text-slate-500\">{activity.time}</p>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-50 to-blue-50/30 dark:from-slate-900 dark:to-slate-950/80 p-6\">\n      {/* Header */}\n      <header className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white\">Elephant Watch Dashboard</h1>\n          <p className=\"text-slate-500 dark:text-slate-400\">{currentDate}</p>\n        </div>\n        <div className=\"flex items-center space-x-4 mt-4 sm:mt-0\">\n          <button\n            onClick={toggleDarkMode}\n            className=\"p-2 rounded-full bg-white dark:bg-slate-800 shadow-sm hover:shadow-md transition-shadow\"\n            aria-label=\"Toggle dark mode\"\n          >\n            {isDark ? (\n              <Sun className=\"h-5 w-5 text-amber-400\" />\n            ) : (\n              <Moon className=\"h-5 w-5 text-slate-700\" />\n            )}\n          </button>\n          <div className=\"h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-medium\">\n            U\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"space-y-8\">\n        {/* Dashboard Toggle */}\n        <div className=\"flex justify-end\">\n          <button \n            onClick={() => setShowEnhancedDashboard(!showEnhancedDashboard)}\n            className={`px-4 py-2 rounded-lg transition-all ${isDark ? 'bg-slate-700 text-white hover:bg-slate-600' : 'bg-blue-100 text-blue-800 hover:bg-blue-200'}`}\n          >\n            {showEnhancedDashboard ? 'Show Simple Dashboard' : 'Show Enhanced Dashboard'}\n          </button>\n        </div>\n        \n        {showEnhancedDashboard ? (\n          /* Enhanced Dashboard with Map and Metrics */\n          <div className=\"bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6\">\n            <EnhancedDashboard />\n          </div>\n        ) : (\n          /* Original Dashboard Content */\n          <>\n            {/* Stats Grid */}\n            {renderStats()}\n            \n            {/* Quick Actions */}\n            {renderQuickActions()}\n            \n            {/* Recent Activity */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                {renderRecentActivity()}\n              </div>\n              \n              {/* Status Overview */}\n              <div>\n                <h2 className=\"text-lg font-medium text-slate-900 dark:text-white mb-4\">System Status</h2>\n                <div className=\"space-y-4\">\n                  <AndroidCard className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-medium text-slate-900 dark:text-white\">Camera System</h3>\n                        <p className=\"text-sm text-slate-500 dark:text-slate-400\">All cameras operational</p>\n                      </div>\n                      <div className=\"h-2.5 w-2.5 rounded-full bg-emerald-500\"></div>\n                    </div>\n                  </AndroidCard>\n                  \n                  <AndroidCard className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-medium text-slate-900 dark:text-white\">Sensors</h3>\n                        <p className=\"text-sm text-slate-500 dark:text-slate-400\">24/25 active</p>\n                      </div>\n                      <div className=\"h-2.5 w-2.5 rounded-full bg-amber-500\"></div>\n                    </div>\n                  </AndroidCard>\n                  \n                  <AndroidCard className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-medium text-slate-900 dark:text-white\">Network</h3>\n                        <p className=\"text-sm text-slate-500 dark:text-slate-400\">Stable connection</p>\n                      </div>\n                      <div className=\"h-2.5 w-2.5 rounded-full bg-emerald-500\"></div>\n                    </div>\n                  </AndroidCard>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </main>\n      \n      {/* Footer */}\n      <footer className=\"mt-12 text-center text-sm text-slate-500 dark:text-slate-400\">\n        <p>© {new Date().getFullYear()} Elephant Watch. All rights reserved.</p>\n      </footer>\n    </div>\n  );\n}\n"],"names":["Tabs","TabsPrimitive.Root","TabsList","React.forwardRef","className","props","ref","jsx","TabsPrimitive.List","cn","TabsTrigger","TabsPrimitive.Trigger","TabsContent","TabsPrimitive.Content","MapBounds","polygons","map","useMap","useEffect","bounds","L","polygon","EnhancedDashboard","filters","setFilters","useState","loading","setLoading","refreshing","setRefreshing","divisions","setDivisions","ranges","setRanges","beats","setBeats","data","setData","error","setError","hasData","setHasData","selectedPolygons","setSelectedPolygons","activityMarkers","setActivityMarkers","fetchDivisions","divisionsData","divError","supabase","mappedDivisions","div","polygonsData","polyError","divisionPolygons","acc","poly","coords","coord","e","fetchRanges","rangesData","rangesError","mappedRanges","range","polygonData","fetchBeats","mappedBeats","beat","fetchData","kpiSummary","kpiError","divisionStats","divisionError","rangeStats","rangeError","beatStats","beatError","observationTypes","observationTypesError","lossData","lossError","total_loss_reports","sum","item","newData","stat","type","err","handleFilterChange","key","value","prev","handleRefresh","fetchPolygons","divisionData","polygonError","geoJsonData","geoJsonError","geoJson","lng","lat","rangeData","beatData","fetchActivityMarkers","markersData","markersError","validMarkers","marker","jsxs","RefreshCw","AlertCircle","Button","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Card","CardHeader","CardTitle","Activity","CardContent","_a","Users","_b","_c","Calendar","_d","CardDescription","Label","MapPin","f","division","MapContainer","TileLayer","Polygon","Popup","point","index","Marker","activity","ResponsiveContainer","BarChart","CartesianGrid","XAxis","YAxis","Tooltip","Legend","Bar","_m","stats","AlertTriangle","quickActions","Plus","BarChart2","recentActivity","Dashboard","theme","toggleDarkMode","useAndroidTheme","isDark","currentDate","handleQuickAction","action","showEnhancedDashboard","setShowEnhancedDashboard","React","renderStats","motion","AndroidCard","renderQuickActions","Link","renderRecentActivity","Sun","Moon","Fragment"],"mappings":"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"}